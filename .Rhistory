"other") %>% recode.multiple.remove.choices2(cl_notjust_other,variable,
"other", "Invalid other response", other_var_name = other_variable,
CL_COLS = CL_COLS)
cl_notjust_other <- thisvar_data %>% dplyr::filter(!!rlang::sym(variable) !=
"other") %>% recode.multiple.remove.choices2(variable,
"other", "Invalid other response", other_var_name = other_variable,
CL_COLS = CL_COLS)
cl_notjust_other
detach("package:utilityR", unload = TRUE)
remove.packages("utilityR")
devtools::install_github('Nestor-Ch/utilityR')
utilityR::recode.multiple.remove.choices
cleaning.log.other.main
# Create a cleaning log file for each loop if there's a need for it.
cleaning.log.other.main <- utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'response.uk',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
consistency_check <- or.edited %>% select(uuid, existing.v, ref.name) %>% filter(!is.na(existing.v)) %>%
tidyr::separate_rows(existing.v  , sep= "[;\r\n]") %>%
mutate(existing.v = trimws(existing.v)) %>%
filter(!existing.v=='') %>%
left_join((tool.survey %>% select(name, list_name)), join_by(ref.name==name )) %>%
anti_join(tool.choices %>% select(list_name,directory_dictionary$label_colname) %>%
rename('existing.v'=directory_dictionary$label_colname))
if(nrow(consistency_check)>0){
stop("Some of the choices that you've selected in the recode.others file do not match the labels that you have in your
tool. Please check the consistency_check object for more details")
}
View(consistency_check)
raw.main_requests <- setdiff(raw.main_requests,consistency_check)
test <- raw.main_requests[raw.main_requests$ref.type=='select_multiple' & !is.na(raw.main_requests$invalid.v),]
test <- test[test$check==2,]
test$uniqui <- test$uuid
test.main <- raw.main
test.main$uniqui <- test.main$uuid
testo_1 <- utilityR::recode.others_select_multiple(data = test.main,or.select_multiple = test,orig_response_col = 'response.uk',print_debug = T,
is.loop = T, tool.survey_others = tool.survey, tool.choices_others = tool.choices,
label_colname ='label::English'
)
testo_2 <- testo %>% group_by_all() %>% filter(n()>1)
testo_2
testo_2 <- testo_1 %>% group_by_all() %>% filter(n()>1)
# get all of the other questions
other.db <- utilityR::get.other.db(tool.choices = tool.choices,
tool.survey = tool.survey,
label_colname = directory_dictionary$label_colname)
other.db
devtools::install_github('Nestor-Ch/utilityR')
remove.packages("utilityR", lib="~/AppData/Local/R/win-library/4.3")
devtools::install_github('Nestor-Ch/utilityR')
remove.packages("utilityR", lib="~/AppData/Local/R/win-library/4.3")
devtools::install_github('Nestor-Ch/utilityR')
# get all of the other questions
other.db <- utilityR::get.other.db(tool.choices = tool.choices,
tool.survey = tool.survey,
label_colname = directory_dictionary$label_colname)
# Separate the other questions files by loop
other.db.main  <- other.db[other.db$name %in% colnames(raw.main),]
# find _other responses in main
other.responses <- utilityR::find.responses(raw.main, other.db.main)
View(other.responses)
utilityR::save.other.requests(utilityR::create.translate.requests(other.responses.j),
directory = directory_dictionary$dir.requests,
make.short.name("other_requests_final"), use_template = F)
utilityR::save.other.requests(utilityR::create.translate.requests(other.responses),
directory = directory_dictionary$dir.requests,
make.short.name("other_requests_fnl"), use_template = F)
utilityR::create.translate.requests(other.responses)
other.responses
other.responses$responses.en <- NA
utilityR::create.translate.requests
utilityR::save.other.requests(utilityR::create.translate.requests(other.responses),
directory = directory_dictionary$dir.requests,
make.short.name("other_requests_fnl"), use_template = F)
utilityR::create.translate.requests(other.responses)
other.responses
other.responses$response.en <- NA
utilityR::save.other.requests(utilityR::create.translate.requests(other.responses),
directory = directory_dictionary$dir.requests,
make.short.name("other_requests_fnl"), use_template = F)
directory_dictionary$dir.requests
make.short.name("other_requests_fnl")
# name that hosts the clean recode.others file, leave as '' if you don't have this file. Nothing will be recoded that way
name_clean_others_file <- 'DS_r2_other_requests_fnl_231220'
sheet_name_others <- 'Sheet2' # name of the sheet where you're holding your requests
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
any(or.edited$check == 1)
any(or.edited$check == 3)
or.edited
or.edited <- or.edited %>% filter(!is.na(existing.v))
library(dpyr)
library(dplyr)
or.edited <- or.edited %>% filter(!is.na(existing.v))
choice
or.edited %>% select(uuid, ref.name, existing.v, choice)
help(get.choice.label)
tool.survey$name
tool.survey[tool.survey$name == or.edited[1]$name,]$list_name
tool.survey$name
tool.survey[tool.survey$name == or.edited[1]$ref.name
tool.survey[tool.survey$name == or.edited[1]$ref.name,]$list_name
tool.survey[tool.survey$name == or.edited$ref.name[1],]$list_name
or.edited$ref.name[1]
tool.survey[tool.survey$name == or.edited$ref.name[1],]
tool.survey[tool.survey$name %in% or.edited$ref.name[1],]
tool.survey[tool.survey$name %in% or.edited$ref.name[1],]$list_name
utilityR::get.choice.label(or.edited$choice[1],
tool.survey[tool.survey$name %in% or.edited$ref.name[1],]$list_name,
label_colname ==directory_dictionary$label_colname,
tool.choices)
utilityR::get.choice.label(or.edited$choice[1],
tool.survey[tool.survey$name %in% or.edited$ref.name[1],]$list_name,
directory_dictionary$label_colname,
tool.choices)
or.edited %>% select(uuid, ref.name, existing.v, choice) %>%
tidyr::separate_rows(choice  , sep= " ")
or.edited %>% select(uuid, ref.name, existing.v, choice) %>%
tidyr::separate_rows(choice  , sep= " ") %>%
tidyr::separate_rows(existing.v  , sep= ";")
or.edited %>% select(uuid, ref.name, existing.v, choice) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ")
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ")
seq_along(length(or.edited))
seq_along(nrow(or.edited))
nrow(or.edited)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:n(),function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:n(),function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited <- or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ")
or.edited
sapply(1:5,function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
or.edited %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited <- or.edited %>% filter(!is.na(existing.v))
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(or.edited$choice[x],
tool.survey[tool.survey$name %in% or.edited$ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice[x],
tool.survey[tool.survey$name %in% ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice,
tool.survey[tool.survey$name %in% ref.name,]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice[x],
tool.survey[tool.survey$name %in% ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)
}
)
)
or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice[x],
tool.survey[tool.survey$name %in% ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)}
)
) %>%
filter(existing.v==choice_label)
existing_check <- or.edited %>% select(uuid, ref.name, choice,existing.v) %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice[x],
tool.survey[tool.survey$name %in% ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)}
)
)
wrong_existing <- existing_check %>% filter(choice_label == existing.v)
wrong_existing
existing_check <- or.edited %>%
tidyr::separate_rows(existing.v  , sep= ";") %>%
tidyr::separate_rows(choice  , sep= " ") %>%
mutate(choice_label = sapply(1:5,function(x){
utilityR::get.choice.label(choice[x],
tool.survey[tool.survey$name %in% ref.name[x],]$list_name,
directory_dictionary$label_colname,
tool.choices)}
)
)
existing_check
existing_check %>% filter(!choice_label == existing.v)
View(existing_check)
existing_check %>% filter(!choice_label == existing.v) %>%
group_by(-(choice, choice_label))
existing_check %>% filter(!choice_label == existing.v) %>%
group_by(-c(choice, choice_label))
filter(!choice_label == existing.v) %>%
select(-choice_label) %>%
group_by(-choice)
existing_check %>% filter(!choice_label == existing.v) %>%
select(-choice_label) %>%
group_by(-choice)
existing_check %>% filter(!choice_label == existing.v) %>%
select(-choice_label) %>%
group_by_at(vars(-choice))
existing_check %>% filter(!choice_label == existing.v) %>%
select(-choice_label) %>%
group_by_at(vars(-choice)) %>%
summarise(across(everything(), ~ paste0(.x, collapse = '; ')))
or.edited2 <- existing_check %>% filter(!choice_label == existing.v) %>%
select(-choice_label) %>%
group_by_at(vars(-choice)) %>%
summarise(across(everything(), ~ paste0(.x, collapse = '; ')))
View(or.edited2)
wrong_existing
View(or.edited)
# separate the other translations to fit each individual dataframe that you have - no unnecessary variables in each
raw.main_requests <- or.edited %>%
filter(name %in% names(raw.main))
raw.main_requests
utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'response.uk',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'responses',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
cleaning.log.other.main <- utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'responses',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
View(cleaning.log.other.main)
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
existing_check <- or.edited %>%filter(!is.na(existing.v))
or.edited <- or.edited %>%filter(!is.na(existing.v))
# separate the other translations to fit each individual dataframe that you have - no unnecessary variables in each
raw.main_requests <- or.edited %>%
filter(name %in% names(raw.main))
raw.main_requests
# Create a cleaning log file for each loop if there's a need for it.
cleaning.log.other.main <- utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'responses',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
cleaning.log.other.main
View(cleaning.log.other.main)
View(cleaning.log.other.main)
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited <- or.edited %>%filter(!is.na(existing.v))
View(or.edited)
# separate the other translations to fit each individual dataframe that you have - no unnecessary variables in each
raw.main_requests <- or.edited %>%
filter(name %in% names(raw.main))
# Create a cleaning log file for each loop if there's a need for it.
cleaning.log.other.main <- utilityR::recode.others(data = raw.main,
or.edited = raw.main_requests,
orig_response_col = 'responses',
is.loop = F,
tool.choices = tool.choices,
tool.survey = tool.survey)
View(cleaning.log.other.main)
# get the integers from main
int_cols_main  <- tool.survey %>%
filter(type == "integer" & datasheet == "main") %>%
pull(name)
utilityR::recode.set.NA.if(raw.main,int_cols_main, code = code_for_check,issue = 'Wrong entry')
code_for_check  <- c('99','999')
utilityR::recode.set.NA.if(raw.main,int_cols_main, code = code_for_check,issue = 'Wrong entry')
sheet_names_new
sheet_names_new
paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
sheet_names_new
i="raw.loop1"
paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
paste0(
"if(nrow(",i,"_999)>0){
",i," <- utilityR::apply.changes(",i,",clog = ",i,"_999,is.loop = T)
}"
)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
eval(parse(text=txt))
# if any in a given loop, apply changes and drop them
txt <- paste0(
"if(nrow(",i,"_999)>0){
",i," <- utilityR::apply.changes(",i,",clog = ",i,"_999,is.loop = T)
}"
)
eval(parse(text=txt))
}
}
i
if(length(sheet_names_new)>0){
for(i in sheet_names_new){
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
eval(parse(text=txt))
# if any in a given loop, apply changes and drop them
txt <- paste0(
"if(nrow(",i,"_999)>0){
",i," <- utilityR::apply.changes(",i,",clog = ",i,"_999,is.loop = T)
}"
)
eval(parse(text=txt))
}
}
cl_log_999
code_for_check  <- c('99','999')
source('src/sections/section_5_create_999_checks.R')
print(cl_log_999)
cl_log_999
warning(paste0('detected ',nrow(cl_log_999),' ',code_for_check,' entries in your data check cl_log_999 for details'))
code_for_check
warning(paste0('detected ',nrow(cl_log_999),' ',paste0(code_for_check,collapse = ','),' entries in your data check cl_log_999 for details'))
warning(paste0('detected ',nrow(cl_log_999),' ',paste0(code_for_check,collapse = '","'),' entries in your data check cl_log_999 for details'))
warning(paste0('detected ',nrow(cl_log_999),' "',paste0(code_for_check,collapse = '","'),'" entries in your data check cl_log_999 for details'))
warning(paste0('detected ',nrow(cl_log_999),' ("',paste0(code_for_check,collapse = '","'),'") entries in your data check cl_log_999 for details'))
warning(paste0('detected ',nrow(cl_log_999),' c("',paste0(code_for_check,collapse = '","'),'") entries in your data check cl_log_999 for details'))
# Separate the cleaning log files so that we only apply changes to those data that need it.
raw.main_999 <- cl_log_999 %>%
filter(variable %in% names(raw.main))
raw.main_999
i
i= raw.loop1
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
txt
i
i=raw.loop1
i='raw.loop1'
paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
gc()
eval(parse(text=txt))
# if any in a given loop, apply changes and drop them
txt <- paste0(
"if(nrow(",i,"_999)>0){
",i," <- utilityR::apply.changes(",i,",clog = ",i,"_999,is.loop = T)
}"
)
txt
nrow(raw.loop1_999)>0
utilityR::apply.changes(raw.loop1,clog = raw.loop1_999,is.loop = T)
raw.loop1_999
raw.loop1[raw.loop1$uuid=='25223e32-5af5-4c84-a93e-896430500dce',]$A_14_hh_member_age
raw.loop1[raw.loop1$loop_index=='loop1_2064',]$A_14_hh_member_age
utilityR::apply.changes()
utilityR::apply.changes
raw.loop1_999
raw.loop1[raw.loop1$loop_index == 'loop1_2064', A_14_hh_member_age] %not=na% '99'
raw.loop1[raw.loop1$loop_index == 'loop1_2064', A_14_hh_member_age]
raw.loop1[raw.loop1$loop_index == 'loop1_2064', 'A_14_hh_member_age']
raw.loop1[raw.loop1$loop_index == 'loop1_2064', 'A_14_hh_member_age'] =='99'
utilityR::`%not=na%`(raw.loop1[raw.loop1$loop_index == 'loop1_2064', 'A_14_hh_member_age'], '99')
utilityR::apply.changes(raw.loop1,clog = raw.loop1_999,is.loop = T)
View(raw.loop1_999)
View(cl_log_999)
View(cl_log_999_main)
i=1
txt <- paste0('int_cols_loop',i,' <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(',sheet_names_new[[i]],')) %>%
pull(name)')
txt
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0('int_cols_loop',i,' <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(',sheet_names_new[[i]],')) %>%
pull(name)')
eval(parse(text=txt))
txt <- paste0('cl_log_999_loop',i,' <- utilityR::recode.set.NA.if(raw.loop1,int_cols_loop",i,", code = code_for_check,issue = "Wrong entry")')
eval(parse(text=txt))
txt <- paste0('bind_rows(cl_log_999,cl_log_999_loop',i,')')
cl_log_999 <- eval(parse(text=txt))
}
}
library(dplyr)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0('int_cols_loop',i,' <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(',sheet_names_new[[i]],')) %>%
pull(name)')
eval(parse(text=txt))
txt <- paste0('cl_log_999_loop',i,' <- utilityR::recode.set.NA.if(raw.loop',i,',int_cols_loop',i,', code = code_for_check,issue = "Wrong entry")')
eval(parse(text=txt))
txt <- paste0('bind_rows(cl_log_999,cl_log_999_loop',i,')')
cl_log_999 <- eval(parse(text=txt))
}
}
cl_log_999 <- tibble()
code_for_check  <- c('99','999')
source('src/sections/section_5_create_999_checks.R')
View(cl_log_999)
raw.loop1_999
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
eval(parse(text=txt))
i
sheet_names_new
i <- "raw.loop1"
# get the weird values per loop
txt <- paste0(i,'_999 <- cl_log_999 %>%
filter(variable %in% names(',i,'))')
eval(parse(text=txt))
utilityR::apply.changes(raw.loop1,clog = raw.loop1_999,is.loop = T)
gc()
remove.packages("utilityR", lib="~/AppData/Local/R/win-library/4.3")
devtools::install_github('Nestor-Ch/utilityR', build_vignettes = T)
vignette()
vignette('cleaning-log-transformers','utilityR')
vignette('cleaning-log-transformers','utilityR')
vignette('cleaning-log-transformers','utilityR')
