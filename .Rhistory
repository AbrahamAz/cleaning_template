points <- reactive(input$geoloc,
require(input$lat)
cbind(input$lat, input$long)
points(cbind(input$lat, input$long))
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
}
)
observeEvent(input$lat,{
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
}
)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
}
)
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
}
output$map <- renderLeaflet({
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
points(cbind(input$lat, input$long))
print('here')
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
require(input$lat)
print('here')
points(cbind(input$lat, input$long))
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
print('here')
require(input$lat)
points(cbind(input$lat, input$long))
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
# ==== libraries
library(shiny)
library(leaflet)
library(shinyjs)
# ==== fonction allowing geolocalisation
jsCode <- '
shinyjs.geoloc = function() {
navigator.geolocation.getCurrentPosition(onSuccess, onError);
function onError (err) {
Shiny.onInputChange("geolocation", false);
}
function onSuccess (position) {
setTimeout(function () {
var coords = position.coords;
console.log(coords.latitude + ", " + coords.longitude);
Shiny.onInputChange("geolocation", true);
Shiny.onInputChange("lat", coords.latitude);
Shiny.onInputChange("long", coords.longitude);
}, 5)
}
};
'
# ==== server
server <- function(input, output) {
# Basic map
output$map <- renderLeaflet({
leaflet() %>%
setView(lng=0, lat=0, zoom=2 ) %>%
addProviderTiles("Esri.WorldImagery")
})
# Find geolocalisation coordinates when user clicks
observeEvent(input$geoloc, {
js$geoloc()
})
points <- reactiveVal(NULL)
observeEvent(input$geoloc, {
print(input$lat)
require(input$lat)
points(cbind(input$lat, input$long))
output$map <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stadia.StamenTonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
)
}
# ==== UI
ui <- fluidPage(
# Tell shiny we will use some Javascript
useShinyjs(),
extendShinyjs(text = jsCode, functions = 'geoloc'),
# One button and one map
br(),
actionButton("geoloc", "Localize me", class="btn btn-primary", onClick="shinyjs.geoloc()"),
leafletOutput("map", height="600px")
)
shinyApp(ui = ui, server = server)
