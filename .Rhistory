empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
process_uuid2 <- function (df)
{
max.num.iterations <- 15
t <- list()
rt <- list()
rt_inter <- list()
j <- list()
q <- list()
w <- list()
e <- list()
t1 <- df$start[1]
if (df$event[1] != "form.start") {
stop("First event is not form.start?!")
}
status <- "filling"
for (r in 2:nrow(df)) {
if (status == "filling" & df$event[r] == "form.exit") {
print(1)
t2 <- df$start[r]
print(2)
t <- append(t, (t2 - t1)/1000/60)
sub.df <- dplyr::filter(df, start >= t1 & start <=
t2)
questions <- dplyr::filter(sub.df, event == "question" |
event == "group.questions")
rt <- append(rt, sum(questions$duration)/60)
rt_inter <- append(rt_inter, as.numeric(sum(questions$inter_q_duration)/60))
q <- append(q, length(unique(questions$node)))
j <- append(j, sum(sub.df$event == "jump"))
e <- append(e, nrow(dplyr::filter(questions, !is.na(old.value) &
old.value != "")))
status <- "waiting"
}
else if (status == "waiting" & df$event[r] == "form.resume") {
t1 <- df$start[r]
w <- append(w, (t1 - t2)/1000/60)
status <- "filling"
}
else if (status == "waiting" & df$event[r] == "form.exit") {
if ("uuid2" %in% colnames(df)) {
warning(paste("status=waiting while form.exit! uuid:",
df$uuid2[r]))
}
else warning("status=waiting while form.exit!")
}
}
res <- data.frame()
res[1, "n.iteration"] <- length(t)
res[1, "tot.t"] <- round((df[nrow(df), "start"] - df[1,
"start"])/60000, 1)
res[1, "tot.rt"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$duration)/60,
1)
res[1, "tot.rt.inter"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$inter_q_duration,
na.rm = T)/60, 1)
for (i in 1:max.num.iterations) {
res[1, c(paste0("t", i), paste0("rt", i), paste0("q",
i), paste0("j", i), paste0("e", i), paste0("w",
i))] <- NA
}
if (length(t) == 0) {
stop(paste0("Your form doesn't have the form.exit event. Please double-check: ",
unique(df$uuid2)))
}
else {
for (i in 1:min(length(t), max.num.iterations)) {
res[1, paste0("t", i)] <- round(t[[i]], 1)
res[1, paste0("rt", i)] <- round(rt[[i]], 1)
res[1, paste0("q", i)] <- q[[i]]
res[1, paste0("j", i)] <- j[[i]]
res[1, paste0("e", i)] <- e[[i]]
}
}
if (length(w) > 0) {
for (i in 1:min(length(w), max.num.iterations)) {
res[1, paste0("w", i)] <- round(w[[i]], 1)
}
}
if ("tag" %in% names(df)) {
res$tag <- paste0(df[!df$tag == "", ]$tag, collapse = ",")
}
empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
process_uuid2 <- function (df)
{
max.num.iterations <- 15
t <- list()
rt <- list()
rt_inter <- list()
j <- list()
q <- list()
w <- list()
e <- list()
t1 <- df$start[1]
if (df$event[1] != "form.start") {
stop("First event is not form.start?!")
}
status <- "filling"
for (r in 2:nrow(df)) {
if (status == "filling" & df$event[r] == "form.exit") {
print(1)
t2 <- df$start[r]
t <- append(t, (t2 - t1)/1000/60)
print(2)
sub.df <- dplyr::filter(df, start >= t1 & start <=
t2)
questions <- dplyr::filter(sub.df, event == "question" |
event == "group.questions")
rt <- append(rt, sum(questions$duration)/60)
rt_inter <- append(rt_inter, as.numeric(sum(questions$inter_q_duration)/60))
q <- append(q, length(unique(questions$node)))
j <- append(j, sum(sub.df$event == "jump"))
e <- append(e, nrow(dplyr::filter(questions, !is.na(old.value) &
old.value != "")))
status <- "waiting"
}
else if (status == "waiting" & df$event[r] == "form.resume") {
t1 <- df$start[r]
w <- append(w, (t1 - t2)/1000/60)
status <- "filling"
}
else if (status == "waiting" & df$event[r] == "form.exit") {
if ("uuid2" %in% colnames(df)) {
warning(paste("status=waiting while form.exit! uuid:",
df$uuid2[r]))
}
else warning("status=waiting while form.exit!")
}
}
res <- data.frame()
res[1, "n.iteration"] <- length(t)
res[1, "tot.t"] <- round((df[nrow(df), "start"] - df[1,
"start"])/60000, 1)
res[1, "tot.rt"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$duration)/60,
1)
res[1, "tot.rt.inter"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$inter_q_duration,
na.rm = T)/60, 1)
for (i in 1:max.num.iterations) {
res[1, c(paste0("t", i), paste0("rt", i), paste0("q",
i), paste0("j", i), paste0("e", i), paste0("w",
i))] <- NA
}
if (length(t) == 0) {
stop(paste0("Your form doesn't have the form.exit event. Please double-check: ",
unique(df$uuid2)))
}
else {
for (i in 1:min(length(t), max.num.iterations)) {
res[1, paste0("t", i)] <- round(t[[i]], 1)
res[1, paste0("rt", i)] <- round(rt[[i]], 1)
res[1, paste0("q", i)] <- q[[i]]
res[1, paste0("j", i)] <- j[[i]]
res[1, paste0("e", i)] <- e[[i]]
}
}
if (length(w) > 0) {
for (i in 1:min(length(w), max.num.iterations)) {
res[1, paste0("w", i)] <- round(w[[i]], 1)
}
}
if ("tag" %in% names(df)) {
res$tag <- paste0(df[!df$tag == "", ]$tag, collapse = ",")
}
empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
process_uuid2 <- function (df)
{
max.num.iterations <- 15
t <- list()
rt <- list()
rt_inter <- list()
j <- list()
q <- list()
w <- list()
e <- list()
t1 <- df$start[1]
if (df$event[1] != "form.start") {
stop("First event is not form.start?!")
}
status <- "filling"
for (r in 2:nrow(df)) {
if (status == "filling" & df$event[r] == "form.exit") {
print(1)
t2 <- df$start[r]
t <- append(t, (t2 - t1)/1000/60)
sub.df <- dplyr::filter(df, start >= t1 & start <=
t2)
print(2)
questions <- dplyr::filter(sub.df, event == "question" |
event == "group.questions")
rt <- append(rt, sum(questions$duration)/60)
rt_inter <- append(rt_inter, as.numeric(sum(questions$inter_q_duration)/60))
q <- append(q, length(unique(questions$node)))
j <- append(j, sum(sub.df$event == "jump"))
e <- append(e, nrow(dplyr::filter(questions, !is.na(old.value) &
old.value != "")))
status <- "waiting"
}
else if (status == "waiting" & df$event[r] == "form.resume") {
t1 <- df$start[r]
w <- append(w, (t1 - t2)/1000/60)
status <- "filling"
}
else if (status == "waiting" & df$event[r] == "form.exit") {
if ("uuid2" %in% colnames(df)) {
warning(paste("status=waiting while form.exit! uuid:",
df$uuid2[r]))
}
else warning("status=waiting while form.exit!")
}
}
res <- data.frame()
res[1, "n.iteration"] <- length(t)
res[1, "tot.t"] <- round((df[nrow(df), "start"] - df[1,
"start"])/60000, 1)
res[1, "tot.rt"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$duration)/60,
1)
res[1, "tot.rt.inter"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$inter_q_duration,
na.rm = T)/60, 1)
for (i in 1:max.num.iterations) {
res[1, c(paste0("t", i), paste0("rt", i), paste0("q",
i), paste0("j", i), paste0("e", i), paste0("w",
i))] <- NA
}
if (length(t) == 0) {
stop(paste0("Your form doesn't have the form.exit event. Please double-check: ",
unique(df$uuid2)))
}
else {
for (i in 1:min(length(t), max.num.iterations)) {
res[1, paste0("t", i)] <- round(t[[i]], 1)
res[1, paste0("rt", i)] <- round(rt[[i]], 1)
res[1, paste0("q", i)] <- q[[i]]
res[1, paste0("j", i)] <- j[[i]]
res[1, paste0("e", i)] <- e[[i]]
}
}
if (length(w) > 0) {
for (i in 1:min(length(w), max.num.iterations)) {
res[1, paste0("w", i)] <- round(w[[i]], 1)
}
}
if ("tag" %in% names(df)) {
res$tag <- paste0(df[!df$tag == "", ]$tag, collapse = ",")
}
empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
process_uuid2 <- function (df)
{
max.num.iterations <- 15
t <- list()
rt <- list()
rt_inter <- list()
j <- list()
q <- list()
w <- list()
e <- list()
t1 <- df$start[1]
if (df$event[1] != "form.start") {
stop("First event is not form.start?!")
}
status <- "filling"
for (r in 2:nrow(df)) {
if (status == "filling" & df$event[r] == "form.exit") {
print(1)
t2 <- df$start[r]
t <- append(t, (t2 - t1)/1000/60)
sub.df <- dplyr::filter(df, start >= t1 & start <=
t2)
questions <- dplyr::filter(sub.df, event == "question" |
event == "group.questions")
rt <- append(rt, sum(questions$duration)/60)
print(2)
rt_inter <- append(rt_inter, as.numeric(sum(questions$inter_q_duration)/60))
q <- append(q, length(unique(questions$node)))
j <- append(j, sum(sub.df$event == "jump"))
e <- append(e, nrow(dplyr::filter(questions, !is.na(old.value) &
old.value != "")))
status <- "waiting"
}
else if (status == "waiting" & df$event[r] == "form.resume") {
t1 <- df$start[r]
w <- append(w, (t1 - t2)/1000/60)
status <- "filling"
}
else if (status == "waiting" & df$event[r] == "form.exit") {
if ("uuid2" %in% colnames(df)) {
warning(paste("status=waiting while form.exit! uuid:",
df$uuid2[r]))
}
else warning("status=waiting while form.exit!")
}
}
res <- data.frame()
res[1, "n.iteration"] <- length(t)
res[1, "tot.t"] <- round((df[nrow(df), "start"] - df[1,
"start"])/60000, 1)
res[1, "tot.rt"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$duration)/60,
1)
res[1, "tot.rt.inter"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$inter_q_duration,
na.rm = T)/60, 1)
for (i in 1:max.num.iterations) {
res[1, c(paste0("t", i), paste0("rt", i), paste0("q",
i), paste0("j", i), paste0("e", i), paste0("w",
i))] <- NA
}
if (length(t) == 0) {
stop(paste0("Your form doesn't have the form.exit event. Please double-check: ",
unique(df$uuid2)))
}
else {
for (i in 1:min(length(t), max.num.iterations)) {
res[1, paste0("t", i)] <- round(t[[i]], 1)
res[1, paste0("rt", i)] <- round(rt[[i]], 1)
res[1, paste0("q", i)] <- q[[i]]
res[1, paste0("j", i)] <- j[[i]]
res[1, paste0("e", i)] <- e[[i]]
}
}
if (length(w) > 0) {
for (i in 1:min(length(w), max.num.iterations)) {
res[1, paste0("w", i)] <- round(w[[i]], 1)
}
}
if ("tag" %in% names(df)) {
res$tag <- paste0(df[!df$tag == "", ]$tag, collapse = ",")
}
empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
process_uuid2 <- function (df)
{
max.num.iterations <- 15
t <- list()
rt <- list()
rt_inter <- list()
j <- list()
q <- list()
w <- list()
e <- list()
t1 <- df$start[1]
if (df$event[1] != "form.start") {
stop("First event is not form.start?!")
}
status <- "filling"
for (r in 2:nrow(df)) {
if (status == "filling" & df$event[r] == "form.exit") {
print(1)
t2 <- df$start[r]
t <- append(t, (t2 - t1)/1000/60)
sub.df <- dplyr::filter(df, start >= t1 & start <=
t2)
questions <- dplyr::filter(sub.df, event == "question" |
event == "group.questions")
rt <- append(rt, as.numeric(sum(questions$duration)/60))
print(2)
rt_inter <- append(rt_inter, as.numeric(sum(questions$inter_q_duration)/60))
q <- append(q, length(unique(questions$node)))
j <- append(j, sum(sub.df$event == "jump"))
e <- append(e, nrow(dplyr::filter(questions, !is.na(old.value) &
old.value != "")))
status <- "waiting"
}
else if (status == "waiting" & df$event[r] == "form.resume") {
t1 <- df$start[r]
w <- append(w, (t1 - t2)/1000/60)
status <- "filling"
}
else if (status == "waiting" & df$event[r] == "form.exit") {
if ("uuid2" %in% colnames(df)) {
warning(paste("status=waiting while form.exit! uuid:",
df$uuid2[r]))
}
else warning("status=waiting while form.exit!")
}
}
res <- data.frame()
res[1, "n.iteration"] <- length(t)
res[1, "tot.t"] <- round((df[nrow(df), "start"] - df[1,
"start"])/60000, 1)
res[1, "tot.rt"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$duration)/60,
1)
res[1, "tot.rt.inter"] <- round(sum(dplyr::filter(df, event ==
"question" | event == "group.questions")$inter_q_duration,
na.rm = T)/60, 1)
for (i in 1:max.num.iterations) {
res[1, c(paste0("t", i), paste0("rt", i), paste0("q",
i), paste0("j", i), paste0("e", i), paste0("w",
i))] <- NA
}
if (length(t) == 0) {
stop(paste0("Your form doesn't have the form.exit event. Please double-check: ",
unique(df$uuid2)))
}
else {
for (i in 1:min(length(t), max.num.iterations)) {
res[1, paste0("t", i)] <- round(t[[i]], 1)
res[1, paste0("rt", i)] <- round(rt[[i]], 1)
res[1, paste0("q", i)] <- q[[i]]
res[1, paste0("j", i)] <- j[[i]]
res[1, paste0("e", i)] <- e[[i]]
}
}
if (length(w) > 0) {
for (i in 1:min(length(w), max.num.iterations)) {
res[1, paste0("w", i)] <- round(w[[i]], 1)
}
}
if ("tag" %in% names(df)) {
res$tag <- paste0(df[!df$tag == "", ]$tag, collapse = ",")
}
empty_colls <- names(res[, sapply(res, function(x) all(is.na(x)))])
res <- res %>% dplyr::select(-dplyr::all_of(empty_colls))
return(res)
}
audits %>%
group_by(uuid) %>%
group_modify(~process_uuid2(.x)) %>%
ungroup() %>%
mutate(tot.rt = tot.rt+tot.rt.inter)
knitr::opts_chunk$set(echo = TRUE)
api_key <- source('resources/microsoft.api.key_ukraine_new.R')$value
source("src/init.R")
df <- read.xlsx("C:/Users/reach/Downloads/UKR2308_MSNA_other_response_230802 1.xlsx")
View(df)
df <- df %>% select(-response.en)
other.responses.j <- utilityR::translate.responses(responses = df,
values_from = 'response.uk',
directory = directory_dictionary$dir.requests,
api.key = api_key)
other.responses.j <- utilityR::translate.responses(responses = df[1:2,],
values_from = 'response.uk',
directory = 'C:/Users/reach/Desktop',
api.key = api_key)
other.responses.j <- utilityR::translate.responses(responses = df,
values_from = 'response.uk',
directory = 'C:/Users/reach/Desktop',
api.key = api_key)
View(other.responses.j)
other.responses.j %>% filter(!is.na(response.en))
df2 <- other.responses.j %>% filter(!is.na(response.en))
other.responses.j <- utilityR::translate.responses(responses = df[1:2],
values_from = 'response.uk',
directory = 'C:/Users/reach/Desktop',
api.key = api_key)
other.responses.j <- utilityR::translate.responses(responses = df[1:2,],
values_from = 'response.uk',
directory = 'C:/Users/reach/Desktop',
api.key = api_key)
df3 <- other.responses.j %>% filter(is.na(response.en)) %>% select(-response.en)
df3 <-df %>% anti_join(df2 %>% select(uuid, loop_index,ref.name,response.uk))
other.responses.j <- utilityR::translate.responses(responses = df3,
values_from = 'response.uk',
directory = 'C:/Users/reach/Desktop',
api.key = api_key)
df_final <- rbind(df2,df3)
df_final <- rbind(df2,other.responses.j)
write.xlsx(df_final, 'C:/Users/reach/Desktop/others_final.xlsx')
Sys.time()
format(Sys.time(),'yy/mm/dd'
)
format(Sys.time(),'yyyy/mm/dd'
)
format('yyyy/mm/dd',Sys.time())
format(Sys.time(), "%Y-%m-%d_%H-%M-%S")
gsub('-','_',format(Sys.time(), "%Y-%m-%d_%H-%M-%S")
)
gsub('-','_',format(Sys.time(), "%Y-%m-%d_%H-%M-%S"))
