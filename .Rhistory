select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_pts
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within)
admin_boundary_centers %>% rename(geometry_center = geometry) %>% names()
admin_boundary_centers <- st_centroid(admin_boundary_select)%>% rename(geometry_center = geometry)
admin_boundary_centers
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
left_join(admin_boundary_centers)
collected_sf
collected_pts
collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry()
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2])
admin_boundary_centers
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers <- st_centroid(admin_boundary_select)
mapview::mapview(admin_boundary_centers)
gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
rgeos::gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
t <- rgeos::gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
View(t)
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
collected_pts
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
select(-c(longitude,latitude,lon_center,lat_center))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
if(! polygon_file_merge_column %in% names(admin_boundary)){
stop('The polygon_file_merge_column with polygon names is not present in your json file')
}
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
rename(actual_location =!!sym(polygon_file_merge_column)) %>%
st_make_valid()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join[2,]
spatial_join$longitude[2,]
spatial_join$longitude[2]
sf_use_s2(FALSE)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(latitude,longitude), cbind(lat_center,lon_center)))
View(spatial_join)
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
collected_pts
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup()
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance_from_center = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
directory_dictionary <- list(
research_cycle_name = 'xxxx',
round = 'xxxx',
dir.audits = "data/inputs/audits/reach/", # The directory to your audit files
dir.audits.check = "output/checking/audit/",# The directory to your audit summary files (you'll be checking these)
dir.requests = "output/checking/requests/", # the directory of your other_requests file
dir.responses = "output/checking/responses/", # the directory of your responses to open questions
enum_colname = "XXX", # the column that contains the enumerator ID,
enum_comments = 'XXX', # the column that contains the enumerator's comments,
filename.tool = "resources/UKR2207_Questionnaire_CCCM_R12_MAR2023_v1.xlsx", # the name of your Kobo tool and its path
data_name = "XXXX.xlsx", # the name of your dataframe
data_path = "data/inputs/kobo_export/", # the path to your dataframe
label_colname = 'label::English', # the name of your label column. Has to be identical in Kobo survey and choices sheets
dctime_short = "XXXX" # the data of your survey (just for naming)
)
api_key <- source('resources/microsoft.api.key_regional.R')$value
#-------------------------------Initialize packages, load tools -----------------------------
source("src/init.R")
source("src/load_Data.R")
test <- read.xlsx('C:/Users/reach/Desktop/Git/tabular_analysis_boilerplate_v4/output/test_cycle_1_2024_05_03_dashboard.xlsx')
View(test)
tidyr::pivot_wider(test, names_from = 'admin_category', values_from = 'perc')
tidyr::pivot_wider(test, names_from = 'admin_category', values_from = 'perc') %>% View()
tidyr::pivot_wider(test %>% select(perc,disaggregations_1,disaggregations_category_1,admin_category,option, variable), names_from = 'admin_category', values_from = 'perc') %>% View()
tidyr::pivot_wider(test %>% select(perc,disaggregations_1,disaggregations_category_1,admin_category,option, variable) %>% filter(is.na(mean)), names_from = 'admin_category', values_from = 'perc') %>% View()
tidyr::pivot_wider(test %>% select(perc,disaggregations_1,disaggregations_category_1,admin_category,option, variable) %>% dplyr::filter(is.na(mean)), names_from = 'admin_category', values_from = 'perc') %>% View()
tidyr::pivot_wider(test  %>% dplyr::filter(is.na(mean))%>% select(perc,disaggregations_1,disaggregations_category_1,admin_category,option, variable), names_from = 'admin_category', values_from = 'perc') %>% View()
source('src/sections/process_old_data.R')
# final preparation
# Rename your dataframes
raw.main <- kobo.raw.main
sheet_names <- sheet_names[sheet_names!='kobo.raw.main']
sheet_names_new <- gsub('kobo.','',sheet_names)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(text=txt))
}
}
# select the columns in your data that contain date elements
date_cols_main <- c("start","end", tool.survey %>% filter(type == "date" & datasheet == "main") %>% pull(name),
"submission_time") # add them here
# transform them into the datetime format
raw.main <- raw.main %>%
mutate_at(date_cols_main, ~ifelse(!str_detect(., '-'), as.character(convertToDateTime(as.numeric(.))), .))
rm(date_cols_main)
# If there were any changes in the tool during data collection, they can be run here
source('src/sections/tool_modification.R')
# audit geospatial check block------------------------------
use_audit <- T # if using audit checks for geospatial checking. Set to false if not doing geospatial check from audits
top_allowed_speed <- 15 # top allowed speed for an enumerator in km per hour
initial_question <- '' # the question that you consider the start of the interview within audits - at which point in the interview we can be sure that the enumerator has started the interview?
final_question <- '' # the question that you consider the end of the interview within audits - at which point in the interview we can be sure that the enumerator has ended the interview?
omit_locations <- T # do you want to omit certail locations because GPS there may be too volatile ?
location_column <- 'oblast' # doesn't have to match the merge_column if you're omitting other (larger geo levels). Leave blank if not using
location_ids <- c("UA26","UA21","UA80") # have to be present in the location_column! Leave blank if not using
# polygonal files and the columns that indicate the interview location in both the polygon file and our dataframe
polygon_file <- 'resources/UKR_ADM4_2020.geojson' # the file with polygons that were supposed to be sampled
polygon_file_merge_column <-'admin4Pcode' # what is the name of the column that signifies the name of the polygon in your json file?
merge_column <- 'settlement' # what is the name of the column that signifies the name of the polygon in your dataframe? Leave blank if not using
#specify the column that holds the cordinates
geo_column <- 'geo_point' # the name of the column that holds your coordinates (in the data). Leave blank if not using
if(!merge_column %in% colnames(raw.main)){
stop('The merge_column with polygon names is not present in your data')
}else{
# find if there are any "geopoint" variables in this data:
if(!geo_column %in% names(raw.main)){
stop('geo_column is not present in your dataset')
}
}
raw.main
View(raw.main)
#specify the column that holds the cordinates
geo_column <- 'k1_gpslocation' # the name of the column that holds your coordinates (in the data). Leave blank if not using
if(!merge_column %in% colnames(raw.main)){
stop('The merge_column with polygon names is not present in your data')
}else{
# find if there are any "geopoint" variables in this data:
if(!geo_column %in% names(raw.main)){
stop('geo_column is not present in your dataset')
}
}
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
if(! polygon_file_merge_column %in% names(admin_boundary)){
stop('The polygon_file_merge_column with polygon names is not present in your json file')
}
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
rename(actual_location =!!sym(polygon_file_merge_column)) %>%
st_make_valid()
raw.main_geo <- raw.main
collected_pts <- raw.main_geo %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
directory_dictionary$enum_colname <- 'enum_id'
collected_pts <- raw.main_geo %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_pts$latitude
collected_pts$longitude
collected_pts <- raw.main_geo %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude = str_split(!!sym(geo_column), " ")[[1]][2],
) %>%
ungroup()
as.numeric(collected_pts$latitude)
between(44,54,as.numeric(collected_pts$latitude))
44,54,as.numeric(collected_pts$latitude)
between(as.numeric(collected_pts$latitude,44,54))
between(as.numeric(collected_pts$latitude),44,54)
sum(between(as.numeric(collected_pts$latitude),44,54))>0.9*nrow(collected_pts)
sum(between(as.numeric(collected_pts$longitude),22,41))>0.9*nrow(collected_pts)
between(as.numeric(collected_pts$longitude),22,41)
# check if mostly all latitude is between the expected range
if(!(
sum(between(as.numeric(collected_pts$latitude),44,54))>0.95*nrow(collected_pts))&
sum(between(as.numeric(collected_pts$longitude),22,41))>0.95*nrow(collected_pts)){
# if not - rename them
collected_pts <- collected_pts %>%
rename(longitude = latitude,
latitude = longitude)
}
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('longitude','latitude'), crs = "+proj=longlat +datum=WGS84")
mapview::mapview(collected_sf)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance_from_center = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
sum(between(as.numeric(admin_boundary_centers$lat_center),44,54))>0.95*nrow(admin_boundary_centers))
sum(between(as.numeric(admin_boundary_centers$lat_center),44,54))>0.95*nrow(admin_boundary_centers)
admin_boundary_select
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude))
sum(between(as.numeric(spatial_join$latitude),44,54))>0.95*nrow(spatial_join)
sum(between(as.numeric(spatial_join$longitude),22,41))>0.95*nrow(spatial_join))
sum(between(as.numeric(spatial_join$longitude),22,41))>0.95*nrow(spatial_join)
!(
sum(between(as.numeric(spatial_join$latitude),44,54))>0.95*nrow(spatial_join)&
sum(between(as.numeric(spatial_join$longitude),22,41))>0.95*nrow(spatial_join))
if(!(
sum(between(as.numeric(spatial_join$latitude),44,54))>0.95*nrow(spatial_join)&
sum(between(as.numeric(spatial_join$longitude),22,41))>0.95*nrow(spatial_join))){
# if not - rename them
spatial_join <- spatial_join %>%
rename(longitude = latitude,
latitude = longitude)
}
spatial_join <- spatial_join %>%
mutate(distance_from_center = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
View(spatial_join)
mapview::mapview(collected_sf)
mapview::mapview(admin_boundary_select)
