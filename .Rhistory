eval(parse(text=txt))
trans.responses <- rbind(trans.responses,trans.responses.main)
if(length(sheet_names_new)>0){
for(loop in 1:length(sheet_names_new)){
txt <- paste0('trans.db.loop',loop,'<- trans.db[trans.db$name %in% colnames(raw.loop',loop,'),]')
eval(parse(text=txt))
txt <- paste0(
'if(nrow(trans.db.loop',loop,')>0){
trans.responses.loop',loop,' <- utilityR::find.responses(raw.loop',loop,', trans.db.loop',loop,', is.loop = T)
}else{trans.responses.loop',loop,' <- data.frame()}'
)
eval(parse(text=txt))
txt <- paste0('trans.responses <- rbind(trans.responses, trans.responses.loop',loop,')')
eval(parse(text=txt))
}
}
length(sheet_names_new)>0
for(loop in 1:length(sheet_names_new)){
txt <- paste0('trans.db.loop',loop,'<- trans.db[trans.db$name %in% colnames(raw.loop',loop,'),]')
eval(parse(text=txt))
txt <- paste0(
'if(nrow(trans.db.loop',loop,')>0){
trans.responses.loop',loop,' <- utilityR::find.responses(raw.loop',loop,', trans.db.loop',loop,', is.loop = T)
}else{trans.responses.loop',loop,' <- data.frame()}'
)
eval(parse(text=txt))
txt <- paste0('trans.responses <- rbind(trans.responses, trans.responses.loop',loop,')')
eval(parse(text=txt))
}
txt <- paste0('trans.db.loop',loop,'<- trans.db[trans.db$name %in% colnames(raw.loop',loop,'),]')
eval(parse(text=txt))
txt <- paste0(
'if(nrow(trans.db.loop',loop,')>0){
trans.responses.loop',loop,' <- utilityR::find.responses(raw.loop',loop,', trans.db.loop',loop,', is.loop = T)
}else{trans.responses.loop',loop,' <- data.frame()}'
)
eval(parse(text=txt))
trans.responses
trans.responses <- rbind(trans.responses,trans.responses.main)
trans.responses <- data.frame()
trans.responses <- rbind(trans.responses,trans.responses.main)
if(length(sheet_names_new)>0){
for(loop in 1:length(sheet_names_new)){
txt <- paste0('trans.db.loop',loop,'<- trans.db[trans.db$name %in% colnames(raw.loop',loop,'),]')
eval(parse(text=txt))
txt <- paste0(
'if(nrow(trans.db.loop',loop,')>0){
trans.responses.loop',loop,' <- utilityR::find.responses(raw.loop',loop,', trans.db.loop',loop,', is.loop = T)
}else{trans.responses.loop',loop,' <- data.frame()}'
)
eval(parse(text=txt))
txt <- paste0('trans.responses <- rbind(trans.responses, trans.responses.loop',loop,')')
eval(parse(text=txt))
}
}
View(trans.db)
trans.db$name %in% names(raw.loop1)
trans.db$name %in% names(raw.loop2)
trans.db$name %in% names(raw.main)
cleaning.log.outliers <- data.frame()
txt <- paste0('cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)')
eval(parse(text=txt))
cols.integer_main <- filter(tool.survey, type == "integer")
if (length(cols.integer_raw.main) == 0) cols.integer_raw.main <- cols.integer_main[cols.integer_main$name %in% colnames(raw.main),] %>% pull(name)
# specify columns for check or leave them empty
cols.integer_raw.main <- c()
if (length(cols.integer_raw.main) == 0) cols.integer_raw.main <- cols.integer_main[cols.integer_main$name %in% colnames(raw.main),] %>% pull(name)
txt <- paste0('cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)')
eval(parse(text=txt))
cols.integer_raw.loop1
txt
cols.integer_raw.loop2
i=1
txt <- paste0('cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)')
eval(parse(text=txt))
cols.integer_raw.loop1
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop1.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
# ignore 0 values or not
ignore_0 <- T
# specify the number of standard deviations you want to use
n.sd <- 3
# specify methods for  detecting outliers
method <- "o1"
# ignore 0 values or not
ignore_0 <- T
eval(parse(text=txt))
outliers.list <- c()
raw.data_frames.list <- c()
columns.list <- c()
if (length(cols.integer_raw.main) != 0) {
raw.main.outliers <- utilityR::detect.outliers(
df = raw.main,
id = 'uuid',
colnames = cols.integer_raw.main,
is.loop = F,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.main.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.main))
columns.list <- c(columns.list, list(cols.integer_raw.main))
} else raw.main.outliers <- data.frame()
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop1.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
raw.loop1.outliers
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop',i,',.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop',i,'.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
# specify the number of standard deviations you want to use
n.sd <- 3
# specify methods for  detecting outliers
method <- "o1"
# ignore 0 values or not
ignore_0 <- T
# specify columns for check or leave them empty
cols.integer_raw.main <- c()
cols.integer_raw.loop1 <- c()
cols.integer_raw.loop2 <- c()
cols.integer_raw.loop3 <- c()
cleaning.log.outliers <- data.frame()
cols.integer_main <- filter(tool.survey, type == "integer")
# specify columns for check or leave them empty
cols.integer_raw.main <- c()
cols.integer_raw.loop1 <- c()
cols.integer_raw.loop2 <- c()
cols.integer_raw.loop3 <- c()
txt <- paste0('f (length(cols.integer_raw.loop',i,') == 0){cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)}')
txt
txt <- paste0('if (length(cols.integer_raw.loop',i,') == 0){cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)}')
txt
eval(parse(text=txt))
cols.integer_raw.loop1
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop',i,'.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
n.sd <- 3
# specify methods for  detecting outliers
method <- "o1"
# ignore 0 values or not
ignore_0 <- T
# specify columns for check or leave them empty
cols.integer_raw.main <- c()
cols.integer_raw.loop1 <- c()
cols.integer_raw.loop2 <- c()
cols.integer_raw.loop3 <- c()
cleaning.log.outliers <- data.frame()
cols.integer_main <- filter(tool.survey, type == "integer")
if (length(cols.integer_raw.main) == 0) cols.integer_raw.main <- cols.integer_main[cols.integer_main$name %in% colnames(raw.main),] %>% pull(name)
cols.integer_raw.main
outliers.list <- c()
raw.data_frames.list <- c()
columns.list <- c()
if (length(cols.integer_raw.main) != 0) {
raw.main.outliers <- utilityR::detect.outliers(
df = raw.main,
id = 'uuid',
colnames = cols.integer_raw.main,
is.loop = F,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.main.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.main))
columns.list <- c(columns.list, list(cols.integer_raw.main))
} else raw.main.outliers <- data.frame()
raw.data_frames.list
columns.list
raw.main.outliers
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0('if (length(cols.integer_raw.loop',i,') == 0){cols.integer_raw.loop',i,' <- cols.integer_main[cols.integer_main$name %in% colnames(raw.loop',i,'),] %>% pull(name)}')
eval(parse(text=txt))
txt <- paste0(
'if (length(cols.integer_raw.loop',i,') != 0) {
raw.loop',i,'.outliers <- utilityR::detect.outliers(
df = raw.loop',i,',
id = "loop_index",
colnames = cols.integer_raw.loop',i,',
is.loop = T,
n.sd = n.sd,
method = method,
ignore_0=ignore_0)
outliers.list <- c(outliers.list, list(raw.loop',i,'.outliers))
raw.data_frames.list <- c(raw.data_frames.list, list(raw.loop',i,'))
columns.list <- c(columns.list, list(cols.integer_raw.loop',i,'))
} else raw.loop',i,'.outliers <- data.frame()'
)
eval(parse(text=txt))
}}
sheet_names_new
sheet_names_new
raw.loop3.outliers
raw.loop2.outliers
raw.loop1.outliers
utilityR::generate.boxplot(outliers.list=outliers.list,
raw.data_frames.list=raw.data_frames.list,
columns.list=columns.list,
n.sd=n.sd, boxplot.path = "output/checking/outliers/outlier_analysis_")
paste0('cleaning.log.outliers <- rbind(cleaning.log.outliers,raw.loop',i,'.outliers)')
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0('cleaning.log.outliers <- rbind(cleaning.log.outliers,raw.loop',i,'.outliers)')
eval(parse(text=txt))
}}
cleaning.log.outliers
raw.loop1.outliers
raw.loop2.outliers
raw.loop1.outliers
# apply changes to the frame
raw.main.outliers <- cleaning.log.outliers[cleaning.log.outliers$variable%in% names(raw.main),]
raw.main.outliers
cleaning.log.outliers
i
txt <- paste0('raw.loop',i,'.outliers <- cleaning.log.outliers[cleaning.log.outliers$variable%in% names(raw.loop',i,'),]')
txt
eval(parse(text=txt))
raw.loop2.outliers
# apply changes to the frame
raw.main.outliers <- cleaning.log.outliers[cleaning.log.outliers$variable%in% names(raw.main),]
raw.main.outliers
txt <- paste0('if(nrow(raw.loop',i,'.outliers)>0){
raw.loop',i,' <- utilityR::apply.changes(raw.loop',i,',clog = raw.loop',i,'.outliers,is.loop = T)
}')
txt
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
directory_dictionary <- list(
research_cycle_name = 'xxxx',
round = 'xxxx',
dir.audits = "data/inputs/audits/reach/", # The directory to your audit files
dir.audits.check = "output/checking/audit/",# The directory to your audit summary files (you'll be checking these)
dir.requests = "output/checking/requests/", # the directory of your other_requests file
dir.responses = "output/checking/responses/", # the directory of your responses to open questions
enum_colname = "XXX", # the column that contains the enumerator ID,
enum_comments = 'XXX', # the column that contains the enumerator's comments,
filename.tool = "resources/MSNA_2023_Questionnaire_Final_CATI_cleaned.xlsx", # the name of your Kobo tool and its path
data_name = "XXXX.xlsx", # the name of your dataframe
data_path = "data/inputs/kobo_export/", # the path to your dataframe
label_colname = 'label::English', # the name of your label column. Has to be identical in Kobo survey and choices sheets
dctime_short = "XXXX" # the data of your survey (just for naming)
)
# name that hosts the clean recode.others file, leave as '' if you don't have this file. Nothing will be recoded that way
name_clean_others_file <- 'UKR2308_MSNA_other_response_230802'
sheet_name_others <- 'Sheet2' # name of the sheet where you're holding your requests
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((ref.name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, ref.name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", ref.name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
library(dplyr)
or.edited %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((ref.name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, ref.name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", ref.name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
directory_dictionary <- list(
research_cycle_name = 'xxxx',
round = 'xxxx',
dir.audits = "data/inputs/audits/reach/", # The directory to your audit files
dir.audits.check = "output/checking/audit/",# The directory to your audit summary files (you'll be checking these)
dir.requests = "output/checking/requests/", # the directory of your other_requests file
dir.responses = "output/checking/responses/", # the directory of your responses to open questions
enum_colname = "XXX", # the column that contains the enumerator ID,
enum_comments = 'XXX', # the column that contains the enumerator's comments,
filename.tool = "resources/MSNA_2023_Questionnaire_Final_CATI_cleaned.xlsx", # the name of your Kobo tool and its path
data_name = "XXXX.xlsx", # the name of your dataframe
data_path = "data/inputs/kobo_export/", # the path to your dataframe
label_colname = 'label::English', # the name of your label column. Has to be identical in Kobo survey and choices sheets
dctime_short = "XXXX" # the data of your survey (just for naming)
)
source("src/load_Data.R")
#-------------------------------Initialize packages, load tools -----------------------------
source("src/init.R")
source("src/load_Data.R")
# get all of the other questions
other.db <- utilityR::get.other.db(tool.choices = tool.choices,
tool.survey = tool.survey,
label_colname = label_colname)
# Separate the other questions files by loop
other.db.main  <- other.db[other.db$name %in% colnames(raw.main),]
raw.main <- kobo.raw.main
# Separate the other questions files by loop
other.db.main  <- other.db[other.db$name %in% colnames(raw.main),]
# find _other responses in main
other.responses <- utilityR::find.responses(raw.main, other.db.main)
or.edited %>% left_join(other.responses)
or.edited <- or.edited %>% left_join(other.responses)
or.edited %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((ref.name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, ref.name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", ref.name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((ref.name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, ref.name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", ref.name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
}))
View(tool.survey)
View(tool.choices)
names(raw.main)%in% tool.survey$name %>% table()
tool.choices$list_name
tool.choices$list_name
or.edited$ref.name
tool.survey %>% select(name,list_name)
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name))
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>% pull(list_name)
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>% pull(list_name) %>% is.na()
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>% pull(list_name) %>% is.na() %>% table()
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
}))
or.edited %>%
dplyr::left_join(tool.survey %>% dplyr::select(name,list_name) %>% dplyr::rename(ref.name=name)) %>%
dplyr::filter(!is.na(existing.v)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
warnings()
dplyr::last_dplyr_warnings()
or.edited %>%
dplyr::left_join(tool.survey %>% dplyr::select(name,list_name) %>% dplyr::rename(ref.name=name))
or.edited %>%
dplyr::left_join(tool.survey %>% dplyr::select(name,list_name) %>% dplyr::rename(ref.name=name)) %>%
dplyr::filter(!is.na(existing.v))
stringr::str_split(or.edited$choice, " ")
stringr::str_split(or.edited$choice[1], " ")
View(or.edited)
