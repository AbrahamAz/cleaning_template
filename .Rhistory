or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v))
stringr::str_split(or.edited$choice, " ")
or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
}))
or.edited %>%
left_join(tool.survey %>% select(name,list_name)) %>%
filter(!is.na(existing.v)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
}))
rlang::last_trace()
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name))
View(or.edited2)
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(ref.name,list_name) %>% rename(name=ref.name))
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name))
View(or.edited2)
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
filter(!is.na(existing.v)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
filter(!is.na(existing.v)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
warnings()
View(tool.survey)
View(tool.choices)
'could_not_afford_cost_of_consultation_service'=='could_not_afford_cost_of_consultation_service'
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
filter(!is.na(choice)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
filter(!is.na(choice))
View(or.edited)
View(other.responses)
or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup()
View(or.edited2)
View(other.responses)
View(other.responses)
'41dc312c-cd35-4c61-8b50-db6c3f9b3e64' %in% raw.main$uuid
or.edited$uuid%in% raw.main$uuid %>% table
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name))
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited <- or.edited[or.edited$uuid%in% raw.main$uuid]
or.edited <- or.edited[is.na(or.edited$loop_index),]
or.edited$uuid%in% raw.main$uuid %>% table()
or.edited <- or.edited %>% left_join(other.responses %>% select(uuid,loop_index,ref.name,name,choice,responses) %>% rename(response.uk = responses))
or.edited2 <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
}))
other.responses$uuid %in% raw.main$uuid
other.responses$uuid %in% raw.main$uuid %>% table()
or.edited <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v)) %>%
dplyr::select(-existing.v.choice_label)
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited <- or.edited[is.na(or.edited$loop_index),]
or.edited<- or.edited[or.edited$uii,]
or.edited<- or.edited[or.edited$uiid %in% raw.main,]
or.edited<- or.edited[or.edited$uuid %in% raw.main$uuid,]
or.edited  <- utilityR::load.requests(directory_dictionary$dir.requests,
name_clean_others_file,
sheet = sheet_name_others, validate = T)  # specify Sheet2 because the first one is a readme
or.edited <- or.edited[is.na(or.edited$loop_index),]
or.edited[or.edited$uuid %in% raw.main$uuid,]
or.edited <- or.edited[or.edited$uuid %in% raw.main$uuid,]
or.edited <- or.edited %>% left_join(other.responses %>% select(uuid,loop_index,ref.name,name,choice,responses) %>% rename(response.uk = responses))
is.na(or.edited$choice)
is.na(or.edited$choice) %>% table()
or.edited <- or.edited %>%
left_join(tool.survey %>% select(name,list_name) %>% rename(ref.name=name)) %>%
dplyr::rowwise() %>%
dplyr::mutate(existing.v.choice_label = sapply(stringr::str_split(choice, " "), function(choice_list) {
if (is.na(existing.v)) {
return("NA")
}
existing.v.list <- unlist(strsplit(existing.v, ";"))
for (ch in choice_list) {
if ((list_name %in% tool.choices$list_name)) {
label <- utilityR::get.choice.label(ch, list_name,
directory_dictionary$label_colname, tool.choices)
if ((is.element(label, existing.v.list))) {
existing.v.list <- existing.v.list[!existing.v.list %in% label]
}
} else {
stop(paste0("The choice list ", list_name, " does not exist in the tool.choices file"))
}
}
return(paste(existing.v.list, collapse = ";"))
})) %>%
dplyr::ungroup() %>%
mutate(existing.v = ifelse(existing.v.choice_label == '', NA, existing.v.choice_label),
invalid.v = ifelse(existing.v.choice_label == '', 'YES', invalid.v))
warn <- nrow(or.edited[or.edited$existing.v.choice_label =='',])
or.edited <- or.edited%>%
dplyr::select(-existing.v.choice_label)
if(warn>0){
warning(paste0(warn,' of the entries in the existing column of the requests file were already
chosen by the respondent in the cumulative column. These `other` enries will be coded
as invalid to speed up the recoding process'))
}
if(warn>0){
warning(paste0(warn,' of the entries in the existing column of the requests file were already
chosen by the respondent in the cumulative column. These `other` enries will be coded
as invalid to speed up the recoding process'))
}
utilityR::save.other.requests
help('pre.process.audits')
help('process.uuid')
utilityR::find.similar.surveys
help('find.similar.surveys')
help('analyse.similarity')
utilityR::analyse.similarity
utilityR::generate.boxplot
paste0("output/checking/audit/enumerators_surveys_", 'n.sd', "sd.pdf")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
directory_dictionary <- list(
research_cycle_name = 'xxxx',
round = 'xxxx',
dir.audits = "data/inputs/audits/reach/", # The directory to your audit files
dir.audits.check = "output/checking/audit/",# The directory to your audit summary files (you'll be checking these)
dir.requests = "output/checking/requests/", # the directory of your other_requests file
dir.responses = "output/checking/responses/", # the directory of your responses to open questions
enum_colname = "XXX", # the column that contains the enumerator ID,
enum_comments = 'XXX', # the column that contains the enumerator's comments,
filename.tool = "resources/MSNA_2023_Questionnaire_Final_CATI_cleaned.xlsx", # the name of your Kobo tool and its path
data_name = "XXXX.xlsx", # the name of your dataframe
data_path = "data/inputs/kobo_export/", # the path to your dataframe
label_colname = 'label::English', # the name of your label column. Has to be identical in Kobo survey and choices sheets
dctime_short = "XXXX" # the data of your survey (just for naming)
)
#-------------------------------Initialize packages, load tools -----------------------------
source("src/init.R")
source("src/load_Data.R")
# load a single raw Kobo data export:
# and loads the data into kobo.raw.main, kobo.raw.loop1...
# also included are the standard steps of renaming uuid, and adding the loop_index
raw_data_filename <- list.files(directory_dictionary$data_path, full.names = T)
if(length(raw_data_filename) > 1) { stop("Found multiple files containing raw Kobo data! Please clean up the kobo_export folder.")
}else if(length(raw_data_filename) == 0){
warning("Raw Kobo data not found!")
kobo.raw.main <- data.frame()
kobo.raw.loop1 <- data.frame()
dataset_creation_time <- NA
dctime_short <- ""
}else if(length(raw_data_filename) == 1){
ls <- excel_sheets(path = raw_data_filename)
sheet_names <- if(length(ls)>1){
c('kobo.raw.main',paste0('kobo.raw.loop',1:(length(ls)-1)))
}else{
'kobo.raw.main'
}
for(i in 1:length(ls)){
if(i==1){
kobo.raw.main <- readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ls[i])
}else{
txt <- paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = "',ls[i],'")'
)
eval(parse(text = txt))
}
}
dataset_creation_time <- as.Date(file.info(raw_data_filename)$ctime)
dctime_short <- str_extract(gsub('-', '', str_sub(dataset_creation_time, 3)), "\\d+")
}
rm(raw_data_filename)
raw.main <- kobo.raw.main
sheet_names <- sheet_names[sheet_names!='kobo.raw.main']
sheet_names_new <- gsub('kobo.','',sheet_names)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(text=txt))
}
}
View(raw.main)
names(raw.main)
names(raw.main) %>% tail()
data$`_geopoint_longitude`
data
data <- readxl::read_xlsx('C:/Users/reach/Downloads/MSNA 2023 coordinates.xlsx')
geo_column <- 'geo_point'
raw.main <- data
geo_column  %in% names(raw.main)
''%in% names(raw.main)
library(dplyr)
raw.main[,geo_column]
raw.main %>%
mutate(!!sym(geo_column) = gsub("^((?:[^\\s]+\\s+){2}[^\\s]+).*", "\\1",geo_column))
raw.main %>%
mutate(check = gsub("^((?:[^\\s]+\\s+){2}[^\\s]+).*", "\\1",geo_column))
raw.main %>%
mutate(check = gsub("^((?:[^\\s]+\\s+){2}[^\\s]+).*", "\\1",!!sym(geo_column)))
raw.main %>%
mutate(check = gsub("^((?:[^\\s]+\\s+){2}[^\\s]+).*", "\\1",!!sym(geo_column))) %>% pull(check)
raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column))) %>% pull(check)
raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column))) %>%
filter(check =='0.0')
raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column))) %>%
filter(check =='0.00')
raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column)),
check = as.numeric(check))
raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column)),
check = as.numeric(check)) %>%
filter(check ==0)
suspicious_geo <- raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column)),
check = as.numeric(check)) %>%
filter(check ==0)
paste0('Found ',nrow(suspicious_geo),' entries with suspicious coordinates')
utilityR::create.deletion.log(suspicious_geo,
directory_dictionary$enum_colname,
"Survey duration deemed too fast.")
suspicious_geo
suspicious_geo <- raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column)),
check = as.numeric(check)) %>%
filter(check ==0) %>%
select(-check)
suspicious_geo$enum <- 'a'
utilityR::create.deletion.log(suspicious_geo,
'enum',
"Survey duration deemed too fast.")
utilityR::create.deletion.log(suspicious_geo,
'enum',
"The geopoint accuracy is 0.0 may mean that the interview is fake.")
deletion.log.coord <- utilityR::create.deletion.log(suspicious_geo,
'enum',
"The geopoint accuracy is 0.0 may mean that the interview is fake.")
