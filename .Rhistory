dataset_creation_time <- as.Date(file.info(raw_data_filename)$ctime)
dctime_short <- str_extract(gsub('-', '', str_sub(dataset_creation_time, 3)), "\\d+")
}
ls[i]
# load a single raw Kobo data export:
# and loads the data into kobo.raw.main, kobo.raw.loop1...
# also included are the standard steps of renaming uuid, and adding the loop_index
raw_data_filename <- list.files(directory_dictionary$data_path, full.names = T)
if(length(raw_data_filename) > 1) { stop("Found multiple files containing raw Kobo data! Please clean up the kobo_export folder.")
}else if(length(raw_data_filename) == 0){
warning("Raw Kobo data not found!")
kobo.raw.main <- data.frame()
kobo.raw.loop1 <- data.frame()
dataset_creation_time <- NA
dctime_short <- ""
}else if(length(raw_data_filename) == 1){
ls <- excel_sheets(path = raw_data_filename)
sheet_names <- if(length(ls)>1){
c('kobo.raw.main',paste0('kobo.raw.loop',1:(length(ls)-1)))
}else{
'kobo.raw.main'
}
for(i in 1:length(ls)){
if(i==1){
kobo.raw.main <- readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ls[i]) %>%
rename_all(~sub("_geolocation","geolocation", .x))
}else{
txt <- paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = "',ls[i],'")%>%
mutate(loop_index = paste0("loop',i-1,'_", loop_index))'
)
eval(parse(text = txt))
}
}
dataset_creation_time <- as.Date(file.info(raw_data_filename)$ctime)
dctime_short <- str_extract(gsub('-', '', str_sub(dataset_creation_time, 3)), "\\d+")
}
rm(raw_data_filename)
source('src/sections/process_old_data.R')
# final preparation
# Rename your dataframes
raw.main <- kobo.raw.main
sheet_names <- sheet_names[sheet_names!='kobo.raw.main']
sheet_names_new <- gsub('kobo.','',sheet_names)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(text=txt))
}
}
# select the columns in your data that contain date elements
date_cols_main <- c("start","end", tool.survey %>% filter(type == "date" & datasheet == "main") %>% pull(name),
"submission_time") # add them here
# transform them into the datetime format
raw.main <- raw.main %>%
mutate_at(date_cols_main, ~ifelse(!str_detect(., '-'), as.character(convertToDateTime(as.numeric(.))), .))
rm(date_cols_main)
# If there were any changes in the tool during data collection, they can be run here
source('src/sections/tool_modification.R')
file.exists(polygon_file) & merge_column!=''
!geo_column %in% names(raw.main)
names(raw.main)
#specify the column that holds the cordinates
geo_column <- 'k1_gpslocation' # the name of the column that holds your coordinates (in the data). Leave blank if not using
!geo_column %in% names(raw.main)
api_key <- source('resources/microsoft.api.key_regional.R')$value
#-------------------------------Initialize packages, load tools -----------------------------
source("src/init.R")
source("src/load_Data.R")
api_key <- source('resources/microsoft.api.key_regional.R')$value
#-------------------------------Initialize packages, load tools -----------------------------
source("src/init.R")
source("src/load_Data.R")
source('src/sections/process_old_data.R')
# final preparation
# Rename your dataframes
raw.main <- kobo.raw.main
sheet_names <- sheet_names[sheet_names!='kobo.raw.main']
sheet_names_new <- gsub('kobo.','',sheet_names)
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(text=txt))
}
}
# select the columns in your data that contain date elements
date_cols_main <- c("start","end", tool.survey %>% filter(type == "date" & datasheet == "main") %>% pull(name),
"submission_time") # add them here
# transform them into the datetime format
raw.main <- raw.main %>%
mutate_at(date_cols_main, ~ifelse(!str_detect(., '-'), as.character(convertToDateTime(as.numeric(.))), .))
rm(date_cols_main)
# If there were any changes in the tool during data collection, they can be run here
source('src/sections/tool_modification.R')
raw.loop1 <- NULL
raw.loop2 <- NULL
!geo_column %in% names(raw.main)
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
! polygon_file_merge_column %in% names(admin_boundary)
polygon_file_merge_column
merge_column
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
rename(actual_location = !!sym(geo_column)) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
rename(actual_location = !!sym(geo_column)) %>%
select(uuid, !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
raw.main$k1_gpslocation
directory_dictionary$enum_colname <- 'enum_id'
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
rename(actual_location = !!sym(geo_column)) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), actual_location) %>%
rowwise() %>%
mutate(
longitude = str_split(actual_location, " ")[[1]][1],
latitude =str_split(actual_location, " ")[[1]][2]
) %>%
ungroup()
collected_pts
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
st_make_valid()
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
sf_use_s2(FALSE)
admin_boundary_select
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), actual_location) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
admin_boundary_select
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
rename(actual_location =!!sym(polygon_file_merge_column)) %>%
st_make_valid()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
sf_use_s2(FALSE)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
spatial_join
st_join(collected_sf, admin_boundary_select, join = st_within)
admin_boundary_select
st_centroid(admin_boundary_select)
admin_boundary_select <- admin_boundary_select %>% left_join(st_centroid(admin_boundary_select))
admin_boundary_select <- admin_boundary_select %>% st_join(st_centroid(admin_boundary_select))
View(admin_boundary_select)
admin_boundary_centers <- st_centroid(admin_boundary_select)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry()
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
rename(actual_location =!!sym(polygon_file_merge_column)) %>%
st_make_valid()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_pts
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within)
admin_boundary_centers %>% rename(geometry_center = geometry) %>% names()
admin_boundary_centers <- st_centroid(admin_boundary_select)%>% rename(geometry_center = geometry)
admin_boundary_centers
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
left_join(admin_boundary_centers)
collected_sf
collected_pts
collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry()
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2])
admin_boundary_centers
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers <- st_centroid(admin_boundary_select)
mapview::mapview(admin_boundary_centers)
gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
rgeos::gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
t <- rgeos::gCentroid(as(admin_boundary_select, "Spatial"), byid = TRUE)
View(t)
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
collected_pts
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
select(-c(longitude,latitude,lon_center,lat_center))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude))
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
if(! polygon_file_merge_column %in% names(admin_boundary)){
stop('The polygon_file_merge_column with polygon names is not present in your json file')
}
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
rename(actual_location =!!sym(polygon_file_merge_column)) %>%
st_make_valid()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,2],
lat_center = sf::st_coordinates(.)[,1]) %>%
st_drop_geometry()
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join[2,]
spatial_join$longitude[2,]
spatial_join$longitude[2]
sf_use_s2(FALSE)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(latitude,longitude), cbind(lat_center,lon_center)))
View(spatial_join)
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
collected_pts
st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(indicated_location = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_centers <- st_centroid(admin_boundary_select)%>%
mutate(lon_center = sf::st_coordinates(.)[,1],
lat_center = sf::st_coordinates(.)[,2]) %>%
st_drop_geometry()
admin_boundary_centers
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(collected_pts %>% select(uuid,longitude,latitude)) %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center)))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup()
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
left_join(admin_boundary_centers) %>%
rowwise() %>%
mutate(longitude = str_split(!!sym(geo_column), " ")[[1]][2],
latitude =str_split(!!sym(geo_column), " ")[[1]][1],
longitude=as.numeric(longitude),
latitude = as.numeric(latitude),
distance_from_center = distHaversine(cbind(longitude,latitude), cbind(lon_center,lat_center))) %>%
ungroup() %>%
select(-c(longitude,latitude,lon_center,lat_center)) %>%
mutate(GPS_MATCH = case_when(
is.na(actual_location) ~ "Outside polygon",
actual_location == indicated_location ~ "Correct polygon",
.default = "Wrong polygon"
))
