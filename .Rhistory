tool.choices = tool.choices,
tool.survey = tool.survey)
}else{cleaning.log.other.loop2 <- data.frame()}
raw.loop2_requests
or.edited %>%
filter(name %in% names(raw.loop2))
nrow(raw.loop1_requests>0)
exists('raw.loop1_requests') & nrow(raw.loop1_request>0)
exists('raw.loop1_requess') & nrow(raw.loop1_requess>0)
if(exists('raw.loop1_requests')){
if(nrow(raw.loop1_requests)>0){
cleaning.log.other.loop1 <- utilityR::recode.others(data = raw.loop1,
or.edited = raw.loop1_requests,
orig_response_col = 'responses',
is.loop = T,
tool.choices = tool.choices,
tool.survey = tool.survey)
}
}else{cleaning.log.other.loop1 <- data.frame()}
raw.main_requests <- or.edited %>%
filter(name %in% names(raw.main))
if(exists('raw.loop1')){
raw.loop1_requests <- or.edited %>%
filter(name %in% names(raw.loop1))
if(nrow(raw.loop1_requests)==0){
rm(raw.loop1_requests)
}
}
if(exists('raw.loop2')){
raw.loop2_requests <- or.edited %>%
filter(name %in% names(raw.loop2))
if(nrow(raw.loop2_requests)==0){
rm(raw.loop2_requests)
}
}
if(exists('raw.loop3')){
raw.loop3_requests <- or.edited %>%
filter(name %in% names(raw.loop3))
if(nrow(raw.loop3_requests)==0){
rm(raw.loop3_requests)
}
}
raw.loop1_requests
raw.loop2_requests
raw.loop3_requests
if(exists('raw.loop2_requests')){
cleaning.log.other.loop2 <- utilityR::recode.others(data = raw.loop2,
or.edited = raw.loop2_requests,
orig_response_col = 'responses',
is.loop = T,
tool.choices = tool.choices,
tool.survey = tool.survey)
}else{cleaning.log.other.loop2 <- data.frame()}
if(exists('raw.loop3_requests')){
cleaning.log.other.loop3 <- utilityR::recode.others(data = raw.loop3,
or.edited = raw.loop3_requests,
orig_response_col = 'responses',
is.loop = T,
tool.choices = tool.choices,
tool.survey = tool.survey)
}else{cleaning.log.other.loop3 <- data.frame()}
## Apply changes from the cleaning log onto our raw data
raw.main <- utilityR::apply.changes(raw.main, clog = cleaning.log.other.main,is.loop = F)
if(nrow(cleaning.log.other.loop1>0)){
raw.loop1 <- utilityR::apply.changes(raw.loop1,clog = cleaning.log.other.loop1,is.loop = T)
}
if(nrow(cleaning.log.other.loop2>0)){
raw.loop2 <- utilityR::apply.changes(raw.loop2,clog = cleaning.log.other.loop2,is.loop = T)
}
if(nrow(cleaning.log.other.loop3>0)){
raw.loop3 <- utilityR::apply.changes(raw.loop3,clog = cleaning.log.other.loop3,is.loop = T)
}
# Create the cleaning log for recoding others
cleaning.log.other <- rbind(cleaning.log.other.main,cleaning.log.other.loop1,
cleaning.log.other.loop2,
cleaning.log.other.loop3
)
# bind it with the main cleaning log
cleaning.log <- bind_rows(cleaning.log, cleaning.log.other)
cleaning.log.checks.direct <- tibble()
code_for_check  <- '99'
source('src/sections/section_5_create_999_checks.R')
int_cols_main
cleaning.log
cl_log_999
# get the integers from main
int_cols_main  <- tool.survey %>%
filter(type == "integer" & datasheet == "main") %>%
pull(name)
# recode if any
cl_log_999_main <- utilityR::recode.set.NA.if(raw.main,int_cols_main, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999_main
#bind the logs
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_main)
if(exists('raw.loop1')){
int_cols_loop1 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop1)) %>%
pull(name)
cl_log_999_loop1 <- utilityR::recode.set.NA.if(raw.loop1,int_cols_loop1, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop1)
}
if(exists('raw.loop2')){
int_cols_loop2 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop2)) %>%
pull(name)
cl_log_999_loop2 <- utilityR::recode.set.NA.if(raw.loop2,int_cols_loop2, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop2)
}
if(exists('raw.loop3')){
int_cols_loop3 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop3)) %>%
pull(name)
cl_log_999_loop3 <- utilityR::recode.set.NA.if(raw.loop3,int_cols_loop3, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop3)
}
cleaning.log <- bind_rows(cleaning.log, cl_log_999)
cl_log_999
cleaning.log
bind_rows(cleaning.log, cl_log_999)
rbind(cleaning.log, cl_log_999)
cl_log_999 <- tibble()
cleaning.log <- bind_rows(cleaning.log, cl_log_999)
cl_log_999 <- tibble()
# get the integers from main
int_cols_main  <- tool.survey %>%
filter(type == "integer" & datasheet == "main") %>%
pull(name)
# recode if any
cl_log_999_main <- utilityR::recode.set.NA.if(raw.main,int_cols_main, code = 'code_for_check',issue = 'Wrong entry')
#bind the logs
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_main)
if(exists('raw.loop1')){
int_cols_loop1 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop1)) %>%
pull(name)
cl_log_999_loop1 <- utilityR::recode.set.NA.if(raw.loop1,int_cols_loop1, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop1)
}
if(exists('raw.loop2')){
int_cols_loop2 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop2)) %>%
pull(name)
cl_log_999_loop2 <- utilityR::recode.set.NA.if(raw.loop2,int_cols_loop2, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop2)
}
if(exists('raw.loop3')){
int_cols_loop3 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop3)) %>%
pull(name)
cl_log_999_loop3 <- utilityR::recode.set.NA.if(raw.loop3,int_cols_loop3, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop3)
}
cleaning.log <- bind_rows(cleaning.log, cl_log_999)
cl_log_999 <- tibble()
# get the integers from main
int_cols_main  <- tool.survey %>%
filter(type == "integer" & datasheet == "main") %>%
pull(name)
# recode if any
cl_log_999_main <- utilityR::recode.set.NA.if(raw.main,int_cols_main, code = 'code_for_check',issue = 'Wrong entry')
#bind the logs
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_main)
int_cols_loop1 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop1)) %>%
pull(name)
cl_log_999_loop1 <- utilityR::recode.set.NA.if(raw.loop1,int_cols_loop1, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999_loop1
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop1)
if(exists('raw.loop2')){
int_cols_loop2 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop2)) %>%
pull(name)
cl_log_999_loop2 <- utilityR::recode.set.NA.if(raw.loop2,int_cols_loop2, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop2)
}
if(exists('raw.loop3')){
int_cols_loop3 <- tool.survey %>%
filter(type == "integer" & datasheet != "main" & name %in% names(raw.loop3)) %>%
pull(name)
cl_log_999_loop3 <- utilityR::recode.set.NA.if(raw.loop3,int_cols_loop3, code = 'code_for_check',issue = 'Wrong entry')
cl_log_999 <- bind_rows(cl_log_999,cl_log_999_loop3)
}
cl_log_999
source('src/sections/section_5_create_999_checks.R')
rsconnect::showLogs(appName = 'Reach_QDB ',account = 'impact-initiatives')
help(showLogs)
rsconnect::showLogs(appName = 'https://impact-initiatives.shinyapps.io/Reach_QDB/',account = 'impact-initiatives')
rsconnect::showLogs(appPath = 'C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs(appPath = 'C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs(appPath = 'C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs(appPath = 'C:/Users/reach/Desktop/Git/Reach_QDB/')
rsconnect::showLogs(appPath = 'C:/Users/reach/Desktop/Git/Reach_QDB/')
t <- readRDS('C:/Users/reach/Downloads/Project_database.rds')
View(t)
source('src/sections/section_5_create_999_checks.R')
cleaning.log
# finalize cleaning log:
cleaning.log <- cleaning.log %>% distinct() %>%
filter(old.value %!=na% new.value) %>% left_join(raw.main %>% select(uuid, any_of(enum_colname)))
(raw.main %>% select(uuid, any_of(enum_colname)))
directory_dictionary
# finalize cleaning log:
cleaning.log <- cleaning.log %>% distinct() %>%
filter(old.value %!=na% new.value) %>% left_join(raw.main %>% select(uuid, any_of(directory_dictionary$enum_colname)))
cleaning.log
length(list.files(make.filename.xlsx("output/cleaning_log", "cleaning_log", no_date = T))) > 0
list.files(make.filename.xlsx("output/cleaning_log", "cleaning_log", no_date = T))
make.filename.xlsx("output/cleaning_log", "cleaning_log", no_date = T)
if (length(list.files(make.filename.xlsx("output/cleaning_log", "cleaning_log", no_date = T))) > 0) {
cleaning.log.previous <- read_xlsx(make.filename.xlsx("output/cleaning_log", "cleaning_log"))
cleaning.log.whole <- rbind(cleaning.log.previous, cleaning.log)
} else {
cleaning.log.whole <- cleaning.log
}
cleaning.log.whole
# Output Cleaning Log
write.xlsx(cleaning.log.whole, make.filename.xlsx("output/cleaning_log", "cleaning_log", no_date = T), overwrite = T)
ls <- excel_sheets(path = raw_data_filename)
raw_data_filename <- list.files(directory_dictionary$data_path, full.names = T)
raw_data_filename
ls <- excel_sheets(path = raw_data_filename)
ls
c('main',paste0('loop',length(ls)-1))
c('main',paste0('loop',1:(length(ls)-1)))
sheet_names <- c('main',paste0('loop',1:(length(ls)-1)))
sheet_names[sheet]
i=1
sheet_names[i]
sheet_names <- c('main',paste0('kobo.raw.loop',1:(length(ls)-1)))
sheet_names
i=2
ls[i]
paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ',ls[i]
)
paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ',ls[i],')'
)
paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ',ls[i],')%>%
rename(uuid = "_submission__uuid",
loop_index = "_index",
parent_index = "_parent_index") %>%
mutate(loop_index = paste0("loop',i,'_", loop_index))'
)
ls <- excel_sheets(path = raw_data_filename)
sheet_names <- c('kobo.raw.main',paste0('kobo.raw.loop',1:(length(ls)-1)))
for(i in 1:length(ls)){
if(sheet_names[i]=='main'){
kobo.raw.main <- readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = i) %>%
rename(uuid = "_uuid")
}else{
txt <- paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ',ls[i],')%>%
rename(uuid = "_submission__uuid",
loop_index = "_index",
parent_index = "_parent_index") %>%
mutate(loop_index = paste0("loop',i,'_", loop_index))'
)
eval(parse(text = txt))
}
}
i
raw_data_filename
sheet_names[i]=='main'
sheet_names
ls[i]=='main'
ls
ls[i]
for(i in 1:length(ls)){
if(i==1){
kobo.raw.main <- readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ls[i]) %>%
rename(uuid = "_uuid")
}else{
txt <- paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ',ls[i],')%>%
rename(uuid = "_submission__uuid",
loop_index = "_index",
parent_index = "_parent_index") %>%
mutate(loop_index = paste0("loop',i,'_", loop_index))'
)
eval(parse(text = txt))
}
}
i
txt
for(i in 1:length(ls)){
if(i==1){
kobo.raw.main <- readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = ls[i]) %>%
rename(uuid = "_uuid")
}else{
txt <- paste0(sheet_names[i],'=readxl::read_xlsx(raw_data_filename, col_types = "text", sheet = "',ls[i],'")%>%
rename(uuid = "_submission__uuid",
loop_index = "_index",
parent_index = "_parent_index") %>%
mutate(loop_index = paste0("loop',i,'_", loop_index))'
)
eval(parse(text = txt))
}
}
as.Date(file.info(raw_data_filename)$ctime)
dctime_short
pii.to.remove_main <- c(
"deviceid",
"staff_other",
"audit",
"audit_URL",
"username")
exists()
ls()
ls()[grepl('kobo.raw')]
ls()[grepl('kobo.raw',ls())]
ls
new.main.removed  <- raw.main %>% select(-any_of(pii.to.remove_main))
ls()[grepl('^raw',ls())]
ls()[grepl('^raw,',ls())]
ls()[grepl('^raw.',ls())]
ls()[grepl('^raw.main$',ls())]
ls()[grepl('^raw.main$|^raw.loop.',ls())]
ls()[grepl('^raw.main$|^raw.loop',ls())]
ls()[grepl('^raw.main$|^raw.loop{d}',ls())]
ls()[grepl('^raw.main$|^raw.loop[:digit"]',ls())]
ls()[grepl('^raw.main$|^raw.loop[:digit:]',ls())]
ls()[grepl('^raw.main$|^raw.loop[[:digit:]]',ls())]
ls()[grepl('^raw.main$|^raw.loop[[:digit:]]$',ls())]
ls()[grepl('^raw.loop[[:digit:]]$|^raw.main$',ls())]
data.list <- ls()[grepl('^raw.loop[[:digit:]]$|^raw.main$',ls())]
sheets
ls
ls[2:length(ls)]
if(length(ls)>1){
ls_loops <- ls[2:length(ls)]
}
if(length(ls)>1){
ls_loops <- ls[2:length(ls)]
}else{ls_loops <- c()}
c()
ls_loops
paste0('"',ls_loops,'" = ',data.list)
paste0('"',ls_loops,'" = ',data.list, collapse = ',')
ls_loops
data.list
data.list <- ls()[grepl('^raw.loop[[:digit:]]$',ls())]
data.list
paste0(
'list = ("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
paste0(
'datasheets <-list = ("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
eval(parse(text= txt))
datasheets
txt <- paste0(
'datasheets <-list = ("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
eval(parse(text= txt))
paste0(
'datasheets <-list = ("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
txt <- paste0(
'datasheets <-list("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
eval(parse(text= txt))
data.list <- ls()[grepl('^kobo.raw.loop[[:digit:]]$',ls())]
data.list
ls_loops
pii.to.remove_main <- c(
"deviceid",
"staff_other",
"audit",
"audit_URL",
"username")
raw.main  <- raw.main %>% select(-any_of(pii.to.remove_main))
if(length(ls)>1){
ls_loops <- ls[2:length(ls)]
}else{ls_loops <- c()}
data.list <- ls()[grepl('^kobo.raw.loop[[:digit:]]$',ls())]
txt <- paste0(
'datasheets <-list("main" =kobo.raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
eval(parse(text= txt))
write.xlsx(datasheets, make.filename.xlsx("output/data_log", "full_data"), overwrite = T,
zoom = 90, firstRow = T)
data.list <- ls()[grepl('^raw.loop[[:digit:]]$',ls())]
txt <- paste0(
'datasheets_anon <-list("main" =raw.main,',
paste0('"',ls_loops,'" = ',data.list, collapse = ','),')'
)
eval(parse(text= txt))
write.xlsx(datasheets_anon, make.filename.xlsx("output/final", "final_anonymized_data"), overwrite = T,
zoom = 90, firstRow = T)
setdiff(names(raw.main),names(kobo.raw.main))
sheet_names[i]
gsub('kobo','',sheet_names)
sheet_names_new <- gsub('kobo.','',sheet_names)
sheet_names_new[sheet_names_new!='raw.main']
sheet_names_new <- sheet_names_new[sheet_names_new!='raw.main']
sheet_names_new[i]
i=1
sheet_names_new[i]
sheet_names
sheet_names <- sheet_names[sheet_names!='kobo.raw.main']
sheet_names_new <- gsub('kobo.','',sheet_names)
sheet_names_new
sheet_names
paste0(sheet_names_new[i],'=',sheet_names[i])
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],'=',sheet_names[i])
eval(parse(txt))
}
}
i
txt
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(txt))
}
}
txt
if(length(sheet_names_new)>0){
for(i in 1:length(sheet_names_new)){
txt <- paste0(sheet_names_new[i],' <- ',sheet_names[i])
eval(parse(text=txt))
}
}
source("src/load_Data.R")
setdiff(names(raw.main),names(kobo.raw.main))
names(kobo.raw.main)
pii.to.remove_main <- c(
"deviceid",
"staff_other",
"audit",
"audit_URL",
"username")
raw.main  <- raw.main %>% select(-any_of(pii.to.remove_main))
setdiff(names(raw.main),names(kobo.raw.main))
names(kobo.raw.main)
raw.main %>% select(-any_of(pii.to.remove_main))
setdiff(names(raw.main),names(kobo.raw.main))
setdiff(names(kobo.raw.main),names(raw.main))
deleted_colums <- data.frame(variable=setdiff(names(kobo.raw.main),names(raw.main)),
action = 'removed',
rationale = NA
)
deleted_colums
data_extract <- raw.main[,c('uuid', directory_dictionary$enum_colname)]
data_extract
cleaning.log %>%
left_join(kobo.raw.main %>% select(uuid,deviceid ))
cleaning.log
tibble(cleaning.log)
logbook <- cleaning.log %>%
left_join(kobo.raw.main %>% select(uuid,deviceid )) %>%
mutate(type_of_issue = NA,
changed = 'Yes',
feedback=NA) %>%
select(uuid, enumerator_id,deviceid,variable,issue, type_of_issue,feedback,changed,old.value, new.value)
logbook
logbook <- cleaning.log %>%
left_join(kobo.raw.main %>% select(uuid,deviceid )) %>%
mutate(type_of_issue = NA,
changed = 'Yes',
feedback=NA) %>%
select(uuid, enumerator_id,deviceid,variable,issue, type_of_issue,feedback,changed,old.value, new.value) %>%
tibble()
logbook
deletion.log.new
deletion.log.audits
deletion.log.new <- bind_rows(deletion.log.new, deletion.log.audits)
deletion.log.new
directory_dictionary
deletion.log.new %>%
left_join(kobo.raw.main %>% select(uuid,deviceid,all_of(directory_dictionary$enum_colname) ))
deletion.log.new
deletion.log.new %>%
left_join(raw.main %>% select(uuid,deviceid,all_of(directory_dictionary$enum_colname) ))
deletion.log.new %>%
left_join(kobo.raw.main %>% select(uuid,deviceid,all_of(directory_dictionary$enum_colname) )) %>%
distinct()
make.filename.xlsx("output/enum_performance.", "Enumerator_performance_temp")
source("src/load_Data.R")
deleted_colums <- data.frame(variable=setdiff(names(kobo.raw.main),names(raw.main)),
action = 'removed',
rationale = NA
)
data_extract <- raw.main[,c('uuid', directory_dictionary$enum_colname)]
logbook <- cleaning.log %>%
left_join(kobo.raw.main %>% select(uuid,deviceid )) %>%
mutate(type_of_issue = NA,
changed = 'Yes',
feedback=NA) %>%
select(uuid, enumerator_id,deviceid,variable,issue, type_of_issue,feedback,changed,old.value, new.value) %>%
tibble()
del_log <- deletion.log.new %>%
left_join(kobo.raw.main %>% select(uuid,deviceid,all_of(directory_dictionary$enum_colname) )) %>%
distinct() %>%
select(uuid,all_of(directory_dictionary$enum_colname),deviceid,reason) %>%
mutate(type_of_issue = NA,
feedback = 'deleted')
submission_file <- list(
'variable_tracker' =deleted_colums,
'data_extract'=data_extract,
'logbook' = logbook,
'del_log'=del_log
)
write.xlsx(submission_file, make.filename.xlsx("output/enum_performance.", "Enumerator_performance_temp"), overwrite = T,
zoom = 90, firstRow = T)
write.xlsx(submission_file, make.filename.xlsx("output", "Enumerator_performance_temp"), overwrite = T,
zoom = 90, firstRow = T)
