directory_dictionary$enum_colname, "Soft duplicate",
is.loop = T, data.main = raw.main)
rm('loop_frame')
rm('res')
deletion.log.softduplicates <- bind_rows(deletion.log.softduplicates, deletion.log.softduplicates_loop)
}
}
}
}
main_dupl
deletion.log.softduplicates
raw.main$geo_point %>% head()
#specify the column that holds the cordinates
geo_column <- 'geo_point'
if(geo_column  %in% names(raw.main)){
suspicious_geo <- raw.main %>%
mutate(check = gsub(".*\\s(\\d+\\.\\d+)$", "\\1",!!sym(geo_column)),
check = as.numeric(check)) %>%
filter(check ==0) %>%
select(-check)
if(nrow(suspicious_geo)>0){
warning(paste0('Found ',nrow(suspicious_geo),' entries with suspicious coordinates'))
deletion.log.coord <- utilityR::create.deletion.log(suspicious_geo,
directory_dictionary$enum_colname,
"The geopoint accuracy is 0.0 may mean that the interview is fake.")
write.xlsx(deletion.log.coord, make.filename.xlsx(directory_dictionary$dir.audits.check, "geospatial_check"),
zoom = 90, firstRow = T)
}
}
library(plyr)
polygon_file <- 'resources/UKR_ADM4_2020.geojson'
exists(polygon_file)
polygon_file
file.exists(polygon_file)
raw.main$settlement
file.exists('')
merge_column
merge_column <- 'settlement' # what is the name of the column that signifies the name of the polygon in your dataframe?
merge_column!=''
!geo_column %in% names(raw.main)
st_read(dsn = polygon_file)
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
admin_boundary$admin4Pcode
polygon_file_merge_column <-'admin4Pcode' # what is the name of the column that signifies the name of the polygon in your json file?
! polygon_file_merge_column %in% names(admin_boundary)
admin_boundary
admin_boundary <-  admin_boundary %>%
mutate(merge_column = !!sym(merge_column)) %>%   # this is to standardize geo data to our pcode format
select(!!sym(merge_column))
admin_boundary <-  admin_boundary %>%
mutate(merge_column = !!sym(merge_column)) %>%   # this is to standardize geo data to our pcode format
select(merge_column)
admin_boundary %>%
mutate(merge_column = !!sym(merge_column))
detach(plyr)
detach('plyr')
detach("package:plyr", unload = TRUE)
admin_boundary <-  admin_boundary %>%
mutate(merge_column = !!sym(merge_column)) %>%   # this is to standardize geo data to our pcode format
select(merge_column)
admin_boundary %>%
mutate(merge_column = !!sym(polygon_file_merge_column)) %>%   # this is to standardize geo data to our pcode format
select(merge_column)
admin_boundary <-  admin_boundary %>%
mutate(merge_column = !!sym(polygon_file_merge_column)) %>%   # this is to standardize geo data to our pcode format
select(merge_column)
raw.main %>%
filter(!is.na(!!sym(geo_column)))
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(enum_colname), !!sym(merge_column), !!sym(geo_column))
enum_colname
directory_dictionary$enum_colname
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column))
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column))
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column))
collected_pts
collected_pts %>% st_as_sf(coords = !!sym(geo_column), crs = "+proj=longlat +datum=WGS84")
collected_pts
collected_pts %>% st_as_sf(coords = !!sym(geo_column), crs = "+proj=longlat +datum=WGS84")
library(sf)
collected_pts %>% st_as_sf(coords = !!sym(geo_column), crs = "+proj=longlat +datum=WGS84")
collected_pts %>% st_as_sf(coords = geo_column, crs = "+proj=longlat +datum=WGS84")
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column))
is.na(collected_pts$geo_point) %>% table()
geo_column
collected_pts %>% st_as_sf(coords = geo_column, crs = "+proj=longlat +datum=WGS84")
sf_use_s2(TRUE)
collected_pts %>% st_as_sf(coords = geo_column, crs = "+proj=longlat +datum=WGS84")
collected_pts
dput(collected_pts$geo_point[1:3])
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(merge_column), " ")[1]
latitude = strsplit(!!sym(merge_column), " ")[2]
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(merge_column), " ")[1],
latitude = strsplit(!!sym(merge_column), " ")[2]
)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(geo_column), " ")[1],
latitude = strsplit(!!sym(geo_column), " ")[2]
)
collected_pts
strsplit(raw.main$geo_column, " ")[1]
strsplit(raw.main$geo_point, " ")[1]
strsplit(raw.main$geo_point, " ")[[1]]
raw.main$geo_point[1]
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(geo_column), " ")[[1]],
latitude = strsplit(!!sym(geo_column), " ")[[2]]
)
raw.main$geo_point[1]
strsplit(raw.main$geo_point, " ")[[1]]
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(geo_column), " ")[[1]][1],
latitude = strsplit(!!sym(geo_column), " ")[[1]][2]
)
collected_pts
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = strsplit(!!sym(geo_column), " ")[1],
latitude = strsplit(!!sym(geo_column), " ")[2]
)
collected_pts
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude = strsplit(!!sym(geo_column), " ")[[1]]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
#      latitude = strsplit(!!sym(geo_column), " ")[[1]]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude = str_extract(!!sym(geo_column), "\\S+\\s(\\S+\\s|$)")
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " "),
latitude = str_extract(!!sym(geo_column), " ")
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[1],
latitude = str_extract(!!sym(geo_column), " ")[2]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]],
latitude = str_extract(!!sym(geo_column), " ")[[2]]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][[1]],
latitude = str_extract(!!sym(geo_column), " ")[[1]][[2]]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][[1]],
#latitude = str_extract(!!sym(geo_column), " ")[[1]][[2]]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[1][1],
latitude = str_split(!!sym(geo_column), " ")[1][2]
)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[1][1],
latitude = str_split(!!sym(geo_column), " ")[1][2]
)
View(collected_pts)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude = str_extract(!!sym(geo_column), "\\S+\\s(\\S+\\s|$)")
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude = str_extract(!!sym(geo_column), "\\S+\\s(\\S+\\s|$)")
)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude = str_extract(!!sym(geo_column), "\\S+\\s(\\S+\\s|$)")
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_extract(!!sym(geo_column), "^[^\\s]+"),
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
)
raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
gps_vars
collected_pts %>% st_as_sf(coords = c('longitude','latitude'), crs = "+proj=longlat +datum=WGS84")
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_sf <- collected_pts %>% st_as_sf(coords = c('longitude','latitude'), crs = "+proj=longlat +datum=WGS84")
collected_sf
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary, join = st_within)
admin_boundary
spatial_join <- st_join(collected_sf, admin_boundary, join = st_within)
View(spatial_join)
admin_boundary <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column))
admin_boundary <- st_read(dsn = polygon_file)
if(! polygon_file_merge_column %in% names(admin_boundary)){
stop('The polygon_file_merge_column with polygon names is not present in your json file')
}
admin_boundary <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column))
admin_boundary
sf_use_s2(TRUE)
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rename(merge_column = !!sym(merge_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_sf <- collected_pts %>% st_as_sf(coords = c('longitude','latitude'), crs = "+proj=longlat +datum=WGS84")
mapview::mapview(collected_sf)
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
mapview::mapview(collected_sf)
st_join(collected_sf, admin_boundary, join = st_within)
admin_boundary <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
st_make_valid()
spatial_join <- st_join(collected_sf, admin_boundary, join = st_within)
View(spatial_join)
polygon_file_merge_column
spatial_join
polygon_file_merge_column
spatial_join <- st_join(collected_sf, admin_boundary, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = ifelse(is.na(!!sym(polygon_file_merge_column)), "outside polygon", ifelse(!!sym(polygon_file_merge_column) == !!sym(merge_column), "Correct polygon", "Wrong polygon")))
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
spatial_join <- st_join(collected_sf, admin_boundary, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = ifelse(is.na(!!sym(polygon_file_merge_column)), "Outside polygon", ifelse(!!sym(polygon_file_merge_column) == !!sym(merge_column), "Correct polygon", "Wrong polygon")))
View(spatial_join)
spatial_join <- st_join(collected_sf, admin_boundary, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = case_when(
is.na(!!sym(polygon_file_merge_column)) ~ "Outside polygon",
!!sym(polygon_file_merge_column) == !!sym(merge_column) ~ "Correct polygon",
.default = "Wrong polygon"
))
View(spatial_join)
admin_boundary <- st_read(dsn = polygon_file)
mapview::mapview(admin_boundary[admin_boundary$admin4Pcode=='UA5308029009',])
any(spatial_join$GPS_MATCH !="Correct polygon")
tibble(spatial_join)
spatial_join
tibble(spatial_join) %>%
filter(GPS_MATCH != "Correct polygon")
check_spatial <- tibble(spatial_join) %>%
filter(GPS_MATCH != "Correct polygon")
write.xlsx(check_spatial, make.filename.xlsx("output/checking/audit/", "gps_checks"), overwrite = T)
if(file.exists(polygon_file) & merge_column!=''){
if(!merge_column %in% colnames(raw.main)){
stop('The merge_column with polygon names is not present in your data')
}else{
# find if there are any "geopoint" variables in this data:
if(!geo_column %in% names(raw.main)){
stop('geo_column is not present in your dataset')
}
}
sf_use_s2(TRUE)
admin_boundary <- st_read(dsn = polygon_file)
if(! polygon_file_merge_column %in% names(admin_boundary)){
stop('The polygon_file_merge_column with polygon names is not present in your json file')
}
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
st_make_valid()
# TODO additional check for low precision??
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
sf_use_s2(FALSE)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = case_when(
is.na(!!sym(polygon_file_merge_column)) ~ "Outside polygon",
!!sym(polygon_file_merge_column) == !!sym(merge_column) ~ "Correct polygon",
.default = "Wrong polygon"
))
if(any(spatial_join$GPS_MATCH !="Correct polygon")){
check_spatial <- tibble(spatial_join) %>%
filter(GPS_MATCH != "Correct polygon")
# %>% view
write.xlsx(check_spatial, make.filename.xlsx("output/checking/audit/", "gps_checks"), overwrite = T)
rm(collected_sf, spatial_join, check_spatial,admin_boundary,admin_boundary_select)
}else cat("All GPS points are matching their selected poviat :)")
}
readxl::read_excel(make.filename.xlsx(directory_dictionary$dir.audits.check, "geospatial_check"))
readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks"))
readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks")) %>%
rename(uuid,!!sym(directory_dictionary$enum_colname), GPS_MATCH) %>%
rename(reason = GPS_MATCH)
readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks")) %>%
select(uuid,!!sym(directory_dictionary$enum_colname), GPS_MATCH) %>%
rename(reason = GPS_MATCH)
rbind(deletion.log.coord,deletion.log.polygon)
deletion.log.coord <- readxl::read_excel(make.filename.xlsx(directory_dictionary$dir.audits.check, "geospatial_check"))
deletion.log.polygon <- readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks")) %>%
select(uuid,!!sym(directory_dictionary$enum_colname), GPS_MATCH) %>%
rename(reason = GPS_MATCH)
rbind(deletion.log.coord,deletion.log.polygon)
deletion.log.coord
deletion.log.polygon
deletion.log.polygon <- readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks")) %>%
select(uuid,!!sym(directory_dictionary$enum_colname), GPS_MATCH) %>%
rename(reason = GPS_MATCH,
enum_ID = !!sym(directory_dictionary$enum_colname))
deletion.log.coord <- rbind(deletion.log.coord,deletion.log.polygon)
deletion.log.coord
deletion.log.polygon
deletion.log.polygon <- readxl::read_excel(make.filename.xlsx("output/checking/audit/", "gps_checks")) %>%
select(uuid,!!sym(directory_dictionary$enum_colname), GPS_MATCH) %>%
rename(reason = GPS_MATCH,
col_enum  = !!sym(directory_dictionary$enum_colname))
deletion.log.coord <- rbind(deletion.log.coord,deletion.log.polygon)
make.filename.xlsx("output/checking/audit/", "gps_checks")
file.exists(make.filename.xlsx(directory_dictionary$dir.audits.check, "geospatial_check"))
file.exists(make.filename.xlsx("output/checking/audit/", "gps_checks"))
admin_boundary <- st_read(dsn = polygon_file)
proj4string(admin_boundary)
st_crs(admin_boundary_select)
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
st_make_valid()
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
st_crs(admin_boundary_select)
st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
st_crs(admin_boundary_select) <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
mapview::mapview(admin_boundary_select)
admin_boundary <- st_read(dsn = polygon_file)
gc()
admin_boundary_select <-  admin_boundary %>%
select(!!sym(polygon_file_merge_column)) %>%
st_make_valid()
collected_pts <- raw.main %>%
filter(!is.na(!!sym(geo_column))) %>%
select(uuid, !!sym(directory_dictionary$enum_colname), !!sym(merge_column), !!sym(geo_column)) %>%
rowwise() %>%
mutate(
longitude = str_split(!!sym(geo_column), " ")[[1]][1],
latitude =str_split(!!sym(geo_column), " ")[[1]][2]
) %>%
ungroup()
raw.main
collected_pts
# set the crs and ensure they're the same
collected_sf <- collected_pts %>% st_as_sf(coords = c('latitude','longitude'), crs = "+proj=longlat +datum=WGS84")
collected_sf
admin_boundary_select <- st_transform(admin_boundary_select, crs = "+proj=longlat +datum=WGS84")
sf_use_s2(FALSE)
st_join(collected_sf, admin_boundary_select, join = st_within)
spatial_join <- st_join(collected_sf, admin_boundary_select, join = st_within) %>%
st_drop_geometry() %>%
mutate(GPS_MATCH = case_when(
is.na(!!sym(polygon_file_merge_column)) ~ "Outside polygon",
!!sym(polygon_file_merge_column) == !!sym(merge_column) ~ "Correct polygon",
.default = "Wrong polygon"
))
View(spatial_join)
mapview::mapview(admin_boundary[admin_boundary$admin4Pcode=='UA0502001005',])
mapview::mapview(admin_boundary[admin_boundary$admin4Pcode%in%c('UA0502001005','UA1202001001'),])
any(spatial_join$GPS_MATCH !="Correct polygon")
knitr::opts_chunk$set(echo = TRUE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
